<?xml version="1.0" encoding="UTF-8"?>
<chapter id="Tutorial">
  <title>Tutorial: A sample application</title>

  <sect1 id="T_Requirements">
    <title>Application requirements</title> 
    <para>Let's imagine we're
    supposed to write a little Customer Care application for a company
    which sells services to customers. The application is used mainly
    by sales people.</para> <para>The users of this application should
    be able to perform the following tasks:
    <itemizedlist mark="opencircle">
      <listitem>
        Add and/or modify services that are sold to customers
      </listitem>
      <listitem>
        Add and/or modify customer information
      </listitem>
      <listitem>
        Input customer orders
      </listitem>
      <listitem>
        Register customer complaints
      </listitem>
      <listitem>
        Assign a 'priority level' to a customer complaint
      </listitem>
    </itemizedlist>
    The application should be capable of supporting concurrent users
    and should be web-based. Also, let's imagine our boss wants this
    application done in say, two days!  No problem! As you'll see, we
    will complete this application in less than two hours.  What to do
    with the rest of the time allocated to this project?  Take a mini
    vacation. 
    </para>
  </sect1>

  <sect1 id="T_DBModel">
    <title>Defining the database model and database connection</title>
    <para>
    First of all, we will design the database model. (If a database
    model already existed, then we could skip this task and simply
    re-use the existing model).  DbForms has no special requirements
    for the database model.  Here is a simple model which addresses the
    requirements defined above.
    </para>

    <sect2 id="T_DBConceptual">
      <title>Conceptual design</title>
      <para>The following database model will be used in this tutorial.
        <figure id="conceptual_diagram_database">
          <title>Conceptual diagram of the database</title>
          <mediaobject>
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/conceptual_diagram_database.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/conceptual_diagram_database.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
    </sect2>

    <sect2 id="T_DBPhysical">
      <title>Physical table creation</title>
      <para>
      Here is the SQL code for creating the database model shown in
      the preceeding section.  The example is for a MySQL database.
      <example>
        <title>SQL code for creating the database tables</title>
<programlisting><![CDATA[
   CREATE TABLE services 
   (
     id          int        NOT NULL PRIMARY KEY,
     name        char (30)  NULL,
     description char (255) NULL
   );

   CREATE TABLE customers 
   (
     id        int       NOT NULL PRIMARY KEY,
     firstname char (50) NULL,
     lastname  char (50) NULL,
     address   char (30) NULL,
     pcode     char (10) NULL,
     city      char (40) NULL
   );

   CREATE TABLE orders
   (
     order_id     int       AUTO_INCREMENT,
     customer_id  int       NOT NULL,
     service_id   int       NULL,
     orderdate    char (20) NULL,
     PRIMARY KEY ( order_id, customer_id )
   );

   CREATE TABLE complaints 
   (
     complaint_id int        AUTO_INCREMENT,
     customer_id  int        NOT NULL,
     usermessage  char (255) NULL,
     incomingdate char (20)  NULL,
     priority     int        NULL,
     PRIMARY KEY ( complaint_id, customer_id )
   );

   CREATE TABLE priorities
   (
     id          int        NOT NULL PRIMARY KEY,
     shortname   char (12)  NULL,
     description char (100) NULL
   );
]]></programlisting>
      </example>
      <emphasis role="bold">Remarks</emphasis>    
    </para>
    <para>
    It would be desirable to add referential integrity, by adding
    foreign keys and/or triggers) but to keep things simple for this
    tutorial on DbForms capabilities, we have not included them.
    </para>
    </sect2>

    <sect2 id="T_DBConfig">
      <title>Defining a database description for DbForms</title>
      <para>
      The next step is to create the XML-based description of this
      model, as follows.
      <example>
        <title>Defining tables in <computeroutput>dbforms-config.xml</computeroutput></title>
        <programlisting><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1" ?>
<dbforms-config>

  <table name="services">
    <field name="id"          fieldType="int" isKey="true" />
    <field name="name"        fieldType="char" />
    <field name="description" fieldType="char" />
  </table>
            
  <table name="customers">
    <field name="id"        fieldType="int" isKey="true" />
    <field name="firstname" fieldType="char" />
    <field name="lastname"  fieldType="char" />
    <field name="address"   fieldType="char" />
    <field name="pcode"     fieldType="char" />
    <field name="city"      fieldType="char" />
  </table>
            
  <table name="orders">
    <field name="order_id"    fieldType="int" isKey="true"
                              autoInc="true" />
    <field name="customer_id" fieldType="int" isKey="true" />
    <field name="service_id"  fieldType="char" sortable="true"/>
    <field name="orderdate"   fieldType="char" sortable="true"/>
  </table>
                
  <table name="complaints">
    <field name="complaint_id" fieldType="int" isKey="true"
                               autoInc="true" />
    <field name="customer_id"  fieldType="int" isKey="true" />
    <field name="usermessage"  fieldType="char" />
    <field name="incomingdate" fieldType="char" sortable="true"/>
    <field name="priority"     fieldType="int"  sortable="true"/>
  </table>
            
  <table name="priorities">
    <field name="id"          fieldType="int" isKey="true" />
    <field name="shortname"   fieldType="char" />
    <field name="description" fieldType="char" />
  </table>    

<!--
  <dbconnection
    name = "java:comp/env/jdbc/tutorial"
    isJndi = "true"
  />
-->
   <dbconnection
     isPow2 = "true"
     connectionProviderClass = 
       "org.dbforms.conprovider.SingleConnectionProvider"
     name = 
       "jdbc:hsqldb:$(SERVLETCONTEXT_REALPATH)/WEB-INF/db_hsql/tutorial"
     isJndi = "false"
     conClass = "org.hsqldb.jdbcDriver"
     username = "sa"
     password = ""
   />

</dbforms-config>
]]></programlisting>
      </example>
      <emphasis role="bold">Remarks</emphasis>    
      </para>
      <para>
      There exists a DbForms tool which does all the painful work of
      transferring a database schema into XML format. See
        <emphasis role="underline">
          <xref linkend="devgui"/>
        </emphasis>
        for more information.        
      </para>
      <para>
      This example includes samples of two 
      <emphasis role="bold"><computeroutput>db:dbconnection</computeroutput></emphasis>
      elements.  Refer to 
        <emphasis role="underline">
          <xref linkend="dbforms_concepts"/>
        </emphasis>
      for a discussion of the dbconnection element.  The example
      that is not commented out uses an in-memory HSQL database that
      requires no setup time to run.
      </para>
    </sect2>
  </sect1>

  <sect1 id="T_Structure">
    <title>Structure and screen flow of the application</title>
    <para>
    To fulfill the requirements, we need to implement at minimum the
    following forms.
    <table>
      <title>Core requirements for our sample application</title>
      <tgroup cols="2">
      <colspec colnum="1" colwidth="140pt"/>
        <tbody>
        <row>
          <entry>Edit services table</entry> <entry>Maintain an
          inventory of the services the company offers.</entry>
        </row>
        <row>
          <entry>Customer orders</entry>
          <entry>Maintain a record of customer orders.</entry>
        </row>
        <row>
          <entry>Customer complaints</entry>
          <entry>Maintain a record of customer complaints.</entry>
        </row>
        </tbody>
      </tgroup>
    </table>
    In addition to developing a page for each of the core
    requirements, we'll implement the following pages for user
    convenience.
    <table>
      <title>Additional features for our sample application</title>
      <tgroup cols="2">
      <colspec colnum="1" colwidth="140pt"/>
        <tbody>
        <row>
          <entry>Main Menu</entry> <entry>The point of entry for the
          application that links to all other pages.</entry>
        </row>
        <row>
          <entry>Edit priority table</entry> <entry>Every complaint
          must be assigned a priority level. This page allows the user
          to edit the valid priority codes that may be used in the
          complaints page.</entry>
        </row>
        <row>
          <entry>Customer list</entry> <entry>This page provides a
          listing (overview) of all customers and enables the user to
          select a customer and jump to the appropriate input
          page.</entry>
        </row>
        <row>
          <entry>All information about customers</entry> <entry>This
          page shows all orders and all complaints for a given
          customer on one page.</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
    The user should be able to navigate from page to page as shown in
    the screen flow diagram below.
  <figure id="screen_flow">
    <title>Screen flow of our application</title>
    <mediaobject>
      <imageobject role="html">
        <imagedata format="PNG" fileref="images/figures/screen_flow.png"/>
      </imageobject>
      <imageobject role="fo">
        <imagedata format="PNG" fileref="../images/figures/screen_flow.png"/>
      </imageobject>
    </mediaobject>
  </figure>
  </para>
  </sect1>

  <sect1 id="T_Implementing">
    <title>Implementing the forms</title>
    <para>
    The following sections will demonstrate how to create our sample
    application using some basic and some more advanced elements of
    DbForms.
    </para>
    <para>
    For each form we are going to discuss here, we have included the
    JSP source code containing the DbForms elements followed by a
    representative screenshot of the resulting HTML page.
    </para>
    <para>
    We suggest installing this tutorial application from the 
    <computeroutput>examples/tutorial</computeroutput>
    directory in the distribution and taking a detailed look at it.
    You will quickly find out how the elements behave and which
    pattern of combined DbForms elements is best for each purpose.
    Instructions for quickly installing the tutorial are described in
      <emphasis role="underline">
        <xref linkend="T_InstallTut"/>
      </emphasis>.
    </para>
    <para>
    For more detailed information about each DbForms custom element,
    please refer to the DbForms Custom Tag Library document in the
    <computeroutput>docs/taglib</computeroutput> directory.  This
    document contains a complete description of all DbForms tags and
    their attributes.
    </para>

    <sect2 id="T_Menu">
      <title>Main Menu</title>
      <para>
      The main menu's only purpose is to link to the other pages. Of
      course, this could be done by simply coding html hyperlinks, but
      this section demonstrates how to use an empty element and how to
      use gotoButton elements.
        <example>
          <title>Code for <computeroutput>menu.jsp</computeroutput></title>
<programlisting><![CDATA[
<%@ taglib uri="/WEB-INF/dbforms.tld" prefix="db" %>
<html>
<head>
  <db:base/>
</head>

<body>

  <h1>Menu</h1>

  <db:dbform followUp="/menu.jsp">
  <center>
  <p>
    <db:gotoButton caption="Edit Services Table"
                   destination="/services.jsp"/>
  </p>
  <p>
    <db:gotoButton caption="Edit Priority Table"
                   destination="/priorities.jsp"/>
  </p>
  <p>
    <db:gotoButton caption="Customer List"
                   destination="/customer_list.jsp"/>
  </p>
  <p>
    <db:gotoButton caption="Browse Customer Orders"
                   destination="/customer_orders.jsp"/>
  </p>
  <p>
    <db:gotoButton caption="Browse Customer Complaints"
                   destination="/customer_complaints.jsp"/>
  </p>
  <p>
    <db:gotoButton caption="All Info about Customers"
                   destination="/customer_all.jsp"/>
  </p>
  </center>
  </db:dbform>

</body>
</html>
]]></programlisting>
        </example>
        <emphasis role="bold">Remarks</emphasis>
      </para>
      <para>
      The 
      <emphasis role="bold"><computeroutput>&lt;%@taglib uri="/WEB-INF/dbForms.tld" prefix="db" %&gt;</computeroutput></emphasis>
      element refers to the Taglib Descriptor (tld) of DbForms
      and defines the prefix used to identify the elements of
      the tag library.  (In our sample application we are using 
      <emphasis role="bold"><computeroutput>db</computeroutput></emphasis>,
      but you could use a different prefix.)  
      </para> 
      <para>
      We used the following attributes of
      <emphasis role="bold"><computeroutput>db:gotoButton</computeroutput></emphasis>:
      <itemizedlist>
        <listitem>
          <emphasis role="bold">caption</emphasis>: the caption of the button
        </listitem>
        <listitem>
          <emphasis role="bold">destination</emphasis>: the URL of the page to jump to
        </listitem>
      </itemizedlist>
      </para>
      <para>
      The 
      <emphasis role="bold"><computeroutput>db:base</computeroutput></emphasis>
      element should be included in every JSP that contains DbForms 
      elements. It ensures that images, Cascading Style Sheets and 
      relative links to other pages are found.
      </para>
      <para>
        <figure>
          <title>Main menu (menu.jsp)</title>
          <mediaobject id="main_menu">
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/main_menu.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/main_menu.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
    </sect2>

    <sect2 id="T_Services">
      <title>Services</title>
      <para>
      This page enables the user to administer an inventory of the
      services the company sells to its customers. The user will get a
      list of all the existing services along with text fields and
      buttons to update and delete rows. Finally an empty input form
      for inserting new services is also presented.
      <example>
        <title>Code for <computeroutput>services.jsp</computeroutput></title>
        <programlisting><![CDATA[
<%@ taglib uri="/WEB-INF/dbforms.tld" prefix="db" %>
<html>            
<head>
  <db:base/>
</head>

<body>
  <db:errors/>                                                            

  <db:dbform tableName="services" maxRows="*" 
             followUp="/services.jsp">

    <db:header>                        
      <db:gotoButton caption="Menu" destination="/menu.jsp" />
      <h1>Services We Provide</h1>
      <center>
        <h3>Existing Service Definitions</h3>
      </center>

      <table border="5" width="60%" align="CENTER">
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Description</th>
        <th>Actions</th>
      </tr>                                                   
    </db:header>

    <db:body>
    <tr>
      <td>
        <db:textField fieldName="id" size="5"/>
      </td>
      <td>
        <db:textField fieldName="name" size="20" 
                      maxlength="30"/>
      </td>
      <td>
        <db:textField fieldName="description" size="24" 
                      maxlength="255"/>
      </td>
      <td>                                    
        <db:updateButton caption="Update"/>
        <db:deleteButton caption="Delete"/>
      </td>
    </tr>
    </db:body>

    <db:footer>
    </table>

    <center><h3>Enter New Service Definition</h3></center>

    <table align="center" border="3">    
    <tr>
      <td>Id</td>
      <td>
        <db:textField size="5" fieldName="id"/>
      </td>
    </tr>
    <tr>
      <td>Name</td>
      <td>
        <db:textField size="20" maxlength="30" fieldName="name"/>
      </td>
    </tr>
    <tr>
      <td>Description</td>
      <td>         
        <db:textArea rows="4" cols="20" wrap="virtual" 
                     fieldName="description"/>
      </td>
    </tr>
    </table>
    <br>
    <center>
      <db:insertButton caption="Store New Service Definition"
                       showAlways="true"/>
    </center>
    </db:footer>
  </db:dbform>
</body>
</html>    
]]></programlisting>
      </example>
      <emphasis role="bold">Remarks</emphasis>
      </para>
      <para>
      There is one HTML table for headings and rows of data.  The 
      <emphasis role="bold">td</emphasis>
      elements that define the column headings are in the 
      <emphasis role="bold"><computeroutput>db:header</computeroutput></emphasis>
      element because the header is rendered  only once on the page.  The 
      <emphasis role="bold"><computeroutput>td</computeroutput></emphasis>
      elements that define the rows of data are in the 
      <emphasis role="bold"><computeroutput>db:body</computeroutput></emphasis>
      element becase the row will be rendered many times if
      multiple rows of data are retrieved from the database.
      </para>
      <para>
      <emphasis role="bold"><computeroutput>maxRows</computeroutput></emphasis>
      is set to 
      <emphasis role="bold"><computeroutput>*</computeroutput></emphasis>
      which is equivalent to 'get all rows'. If the data
      requested contains a great number of rows, we might
      consider setting 
      <computeroutput>maxRows</computeroutput>
      to 10, 20 or another limited number.  If so, we would
      instantiate navigation buttons for scrolling between the
      pages. We will use that pattern later on.
      </para>
      <para>
      The 
      <emphasis role="bold"><computeroutput>db:errors</computeroutput></emphasis>
      element shows a list of errors, if any occurred (i.e.
      duplicate key error, etc.).  The placement of this 
      element determines where the messages will be displayed.
      </para>
      <para>
      The 
      <emphasis role="bold"><computeroutput>db:updateButton</computeroutput></emphasis>
      and
      <emphasis role="bold"><computeroutput>db:deleteButton</computeroutput></emphasis>
      elements are placed in the body and are therefore rendered for each row.
      </para>
      <para>
        <figure id="Managing_services">
          <title>Managing services (services.jsp)</title>
          <mediaobject>
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/managing_services.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/managing_services.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
    </sect2>

    <sect2 id="T_Priorities">
      <title> Priorities</title>
      <para>
      This page enables the user to manage a list of priorities we
      will use this data later in the
      <computeroutput>complaints</computeroutput>
      page where we will prompt the user to select the appropriate
      priority for a user's complaint.
      <example>
        <title>Code for <computeroutput>priorities.jsp</computeroutput></title>
        <programlisting><![CDATA[
<%@ taglib uri="/WEB-INF/dbforms.tld" prefix="db" %>
<html>
<head>
  <db:base/>
</head>

<body>
<db:errors/>

<db:dbform tableName="priorities" maxRows="*" 
  followUp="/priorities.jsp" autoUpdate="true">

  <db:header>                            
    <db:gotoButton caption="Menu" destination="/menu.jsp" />
    <h1>Priority Definitions</h1>
    <center><h3>Existing Priority Definitions</h3></center>
    <table border="5" width="60%" align="CENTER">
    <tr>
      <th>Id</th>
      <th>Short Name</th>
      <th>Description</th>
      <th>Actions</th>
    </tr>                        
  </db:header>

  <db:body>
    <tr>
      <td><db:label fieldName="id"/></td>
      <td><db:textField fieldName="shortname"/></td>
      <td><db:textField fieldName="description"/></td>
      <td>
        <db:updateButton caption="Update"/>
        <db:deleteButton caption="Delete"/>
      </td>
    </tr>
  </db:body>

  <db:footer>
    </table>

    <center><h3>Enter New Priority Definition</h3></center>

    <table border="3" align="center">
    <tr>
      <td>Id</td>
      <td><db:textField size="3" fieldName="id"/></td>
    </tr>
    <tr>
      <td>Short-Name</td>
      <td><db:textField fieldName="shortname"/></td>
    </tr>
    <tr>
      <td>Description</td>
      <td><db:textArea rows="3" cols="20" 
                       fieldName="description"/></td>
    </tr>
    </table>

    <br>
    <center>                                    
      <db:insertButton caption="Store New Priority Definition"
                       showAlways="true"/>
    </center>
  </db:footer>

</db:dbform>
</body>
</html>    
]]></programlisting>
      </example>
      <emphasis role="bold">Remarks</emphasis>
      </para>
      <para>
      As you may have noticed, we have used a pattern for this page
      that is similar to the pattern for
      <computeroutput>services.jsp</computeroutput>.
      </para>
      <para>
      The only real difference can be found in the 
      <emphasis role="bold"><computeroutput>autoUpdate</computeroutput></emphasis>
      attribute in the
      <emphasis role="bold"><computeroutput>db:form</computeroutput></emphasis>
      element, which is set to 
      <emphasis role="bold"><computeroutput>true</computeroutput></emphasis>
      in
      <computeroutput>priorities.jsp</computeroutput>.
      This means, that all rows will be updated if their text fields
      (and other data-sensitive elements such as pick lists)
      have been edited by the
      user. For example, if the user edits data in priorities numbered
      1, 2 and 3 and then clicks a single update (or any other action
      button),
      <emphasis role="bold">all</emphasis>
      changes will be stored 
      <emphasis role="bold">automatically</emphasis>
      in the database! (These automatically triggered
      events are called 
      <emphasis role="italic">implicit</emphasis>,
      or 
      <emphasis role="italic">secondary</emphasis>
      events.)x
      </para>
      <para>
        <figure id="Defining_and_editing_priority_levels">
          <title>Defining priority levels (priorities.jsp)</title>
          <mediaobject>
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/priority_levels.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/priority_levels.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
    </sect2>

    <sect2 id="T_CustList">
      <title>Customer list</title>
      <para>
      This convenience page provides the user with a listing of all
      customers.  The user is able to select a customer from the
      list and perform a given operation (edit orders, edit
      complaints submitted by the customer).  The user will be able
      to delete existing customers, as well.
      <example>
        <title>Code for <computeroutput>customer_list.jsp</computeroutput></title>
        <programlisting><![CDATA[
<%@ taglib uri="/WEB-INF/dbforms.tld" prefix="db" %>
<html>
<head>                    
  <db:base/>
</head>                
<body>                    
  <db:errors/>                                       

  <db:dbform tableName="customers" maxRows="*" 
             followUp="/customer_list.jsp"
             autoUpdate="false">

    <db:header>
    <db:gotoButton caption="Menu" destination="/menu.jsp" />
      <h1>Customer List</h1>
      <table align="center" cellspacing="6">
      <tr>
        <td><b></b></td>
        <td><b>First Name</b></td>
        <td><b>Last Name</b></td>
        <td><b>Address</b></td>
        <td><b>P-Code</b></td>
        <td><b>City</b></td>
        <td><b>Action</b></td>
      </tr>                       
    </db:header>                                                

    <db:body allowNew="false">
      <tr>
        <td><db:associatedRadio name="r_customerkey" /></td>
        <td><db:label fieldName="firstname"/></td>
        <td><db:label fieldName="lastname"/></td>                                
        <td><db:label fieldName="address"/></td>
        <td><db:label fieldName="pcode"/></td>
        <td><db:label fieldName="city"/></td>
        <td><db:deleteButton caption="delete"/></td>
      </tr>
    </db:body>                        

    <db:footer>
      </table>
      <p>
      <center>

      Show

      <db:gotoButton caption="Orders" 
                     destination="/customer_orders.jsp" 
                     destTable="customers" 
                     keyToKeyToDestPos="r_customerkey"/>

      <db:gotoButton caption="Complaints" 
        destination="/customer_complaints.jsp"
        destTable="customers" 
        keyToKeyToDestPos="r_customerkey"/>

      <db:gotoButton caption="All Information"
                     destination="/customer_all.jsp" 
                     destTable="customers"
                     keyToKeyToDestPos="r_customerkey"/>

      of the selected customer!

      </center>
      </p>                        
    </db:footer>

  </db:dbform>
</body>
</html>
]]></programlisting>
      </example>
      <emphasis role="bold">Remarks</emphasis>
      </para>
      <para>
      In this page, we introduce a new pattern, the use of 
      <emphasis role="bold"><computeroutput>db:associatedRadio</computeroutput></emphasis>
      elements.  To demonstrate the difference between this new
      pattern and the old pattern, we have used
      <emphasis role="italic">both</emphasis>

      patterns in the customer list page. The delete buttons follow
      the old pattern and the buttons for orders, complaints and all
      information are implemented using the new pattern.  Using
      <emphasis role="bold"><computeroutput>db:associatedRadio</computeroutput></emphasis>
      elements to mark a row for certain actions (in
      our case navigating to orders, complaints and all information)
      saves a lot of space and makes for a cleaner interface. If we
      had to include a button for all possible actions, the page would
      not look very user-friendly.
      </para>
      <para>
      You may have noticed that the 
      <emphasis role="bold"><computeroutput>db:gotoButton</computeroutput></emphasis> 
      element has a strange sounding attribute 
      <emphasis role="bold"><computeroutput>keyToKeyToDestPos</computeroutput></emphasis>.

      The value of this attribute is generated by DbForms and links
      the row in the page that is associated with the radio button
      with the corresponding row in the Customers table.  It refers to
      the primary key in the Customers table and is used to identify
      the row the system will jump to when the user clicks an action
      button.
      </para>
      <para>
      Another interesting item is that the attribute 
      <emphasis role="bold"><computeroutput>allowNew</computeroutput></emphasis> 
      in the 
      <computeroutput>db:body</computeroutput>
      element is set to a value of 
      <emphasis role="bold"><computeroutput>false</computeroutput></emphasis>.  
      This has the effect, in the case of an empty result set (no
      customers), of bypassing the body element altogether.
      </para>
      <para>
        <figure id="List_of_existing_customers">
          <title>List of customers (customer_list.jsp)</title>
          <mediaobject>
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/existing_customers.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/existing_customers.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
    </sect2>

    <sect2 id="T_Orders">
      <title>Orders</title>
      <para>
      This page provides the user with the ability to manage new
      orders for a given customer.  The user is able to edit customer
      orders, as well as customer data. The user should not be
      required to 'struggle' with item numbers, but instead, should be
      able to simply select (from a drop down select box) the services
      the customer has indicated they wish to purchase.
      </para>
      <para>
        <figure id="Underlying_data_for_customer_orders.jsp">
          <title>
          Underlying data for 
          <computeroutput>customer_orders.jsp
          </computeroutput>
          </title>
          <mediaobject>
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/customer_order_relationships.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/customer_order_relationships.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      <example>
        <title>
        Code for 
        <computeroutput>customer_orders.jsp</computeroutput>
        </title>
        <programlisting><![CDATA[
<%@ taglib uri="/WEB-INF/dbforms.tld" prefix="db" %>
<html>
<head>
  <db:base/>
</head>

<body>

  <!-- show any database errors here -->
  <db:errors/>

  <db:dbform tableName="customers" maxRows="1"
             followUp="/customer_orders.jsp" autoUpdate="false">

  <db:header>
    <db:gotoButton caption="Menu" destination="/menu.jsp" />
    <h1>Customer Orders</h1>
  </db:header>

  <db:body>
    <table align="center">
    <tr>
      <td>Id</td>
      <td>
        <db:textField fieldName="id" size="4"/>
      </td>
    </tr>
    <tr>
      <td>First Name</td>
      <td>
        <db:textField fieldName="firstname" size="18"/>
      </td>
    </tr>
    <tr>
      <td>Last Name</td>
      <td>
        <db:textField fieldName="lastname" size="18"/>
      </td>
    </tr>
    <tr>
      <td>Address:</td>
      <td>
        <db:textField fieldName="address" size="25" />
      </td>
    </tr>
    <tr>
      <td>Postal Code - City</td>
      <td>
        <db:textField fieldName="pcode" size="6"/> -
        <db:textField fieldName="city" size="16"/>
      </td>
    </tr>
    </table>
    <br>

    <!-- table embedding the sub form -->
    <table align="center" border="1">
    <tr>
      <td>
        <center><p><b>Orders</b></p></center>

        <!-------- sub form begin ------->
        <db:dbform tableName="orders" maxRows="2" 
                   parentField="id" childField="customer_id" 
                   followUp="/customer_orders.jsp"
                   autoUpdate="false">

          <db:header>
            <!-- Show existing orders of services for the customer -->
            <table width="100%">
            <tr>
              <td width="40"></td>
              <td>Service</td>
              <td>Order Date</td>
            </tr>
          </db:header>

          <db:body allowNew="true">
            <tr>
              <td width="40">
                <db:associatedRadio name="radio_order"/>
              </td>
              <td>
                <db:select fieldName="service_id">
                  <db:tableData
                    name          = "our_services"
                    foreignTable  = "services"
                    visibleFields = "name"
                    storeField    = "id"
                  />
                </db:select>
              </td>
              <td>
                <db:textField fieldName="orderdate" size="14"/>
              </td>
            </tr>
          </db:body>

          <db:footer>
            <tr>
              <td colspan="3" align="CENTER">
                <db:updateButton caption="Update Order"
                                 associatedRadio="radio_order"/>
                <db:deleteButton caption="Delete Order"
                                 associatedRadio="radio_order"/>
                <db:insertButton caption="Store New Order"
                                 showAlways="false" />
                <db:navNewButton caption="New Order" 
                                 showAlwaysInFooter="false" />
              </td>
            </tr>
            </table>

            <br>
            <center>
              <db:navFirstButton caption="&lt;&lt; First" />
              <db:navPrevButton caption="&lt; Previous" />
              <db:navNextButton caption="Next &gt;" />
              <db:navLastButton caption="Last &gt;&gt;" />
            </center>

          </db:footer>

        </db:dbform>
        <!-------- sub form end -------->

      </td>
    </tr>
    </table>
    <!-- end of table embedding the sub form -->

    <br>
    <center>
      <db:insertButton caption="Store New Customer" />
      <db:updateButton caption="Update Customer" />
      <db:deleteButton caption="Delete Customer" />
      <db:navNewButton caption="New Customer" 
                       showAlwaysInFooter="false" />
    </center>
  </db:body>

  <db:footer>
    <br>
    <center>
      <db:navFirstButton caption="&lt;&lt; First" />
      <db:navPrevButton caption="&lt; Previous" />
      <db:navNextButton caption="Next &gt;"  />
      <db:navLastButton caption="Last &gt;&gt;" />
    </center>
  </db:footer>

  </db:dbform>
</body>
</html>
]]></programlisting>
      </example>
      <emphasis role="bold">Remarks</emphasis>
      </para>
      <para>
      In this page, we have introduced several new DbForm features.
      </para>
      <para>
      Nested Forms: The structure of this page is similar
      to the structure shown in
        <emphasis role="underline">
          <xref linkend="DbFormsStructure"/>
        </emphasis>
      where a main form has a subform in its body. The subform 
      is linked to its parent by the equality of one or more
      data fields defined in the child form's 
      <emphasis role="bold"><computeroutput>parentField</computeroutput></emphasis> 
      and 
      <emphasis role="bold"><computeroutput>childField</computeroutput></emphasis> 
      attributes. If there is more than one field to define for
      correct mapping, a field list may be provided, with each field
      separated from the other by commas or semicolons.
      </para>
      <para>
      Select Element: In addition to 
      <emphasis role="bold"><computeroutput>db:textField:</computeroutput></emphasis> 
      and 
      <emphasis role="bold"><computeroutput>db:textArea</computeroutput></emphasis>
      elements, more complex elements like 
      <emphasis role="bold"><computeroutput>db:select</computeroutput></emphasis>, 
      <emphasis role="bold"><computeroutput>db:radio</computeroutput></emphasis> and 
      <emphasis role="bold"><computeroutput>db:checkbox</computeroutput></emphasis> 
      can be used for data visualization and manipulation. The 
      <emphasis role="bold"><computeroutput>db:select</computeroutput></emphasis>
      element to allows the user to choose the type of services
      available from a pulldown list.
      </para>
      <para>
      External data fetched by a 
      <emphasis role="bold"><computeroutput>db:tableData</computeroutput></emphasis>
      element: This element provides external data for 
      <emphasis role="bold"><computeroutput>db:radio</computeroutput></emphasis>, 
      <emphasis role="bold"><computeroutput>db:checkbox</computeroutput></emphasis> or 
      <emphasis role="bold"><computeroutput>db:select</computeroutput></emphasis> 
      elements. It may be used for cross references to other
      tables. In our case, we initialized the select box with external
      data from the service table.  Be aware that you have to
      distinguish between the field(s) to be
      <emphasis role="italic">shown</emphasis> 
      to the user and the field to be 
      <emphasis role="italic">stored</emphasis> 
      in the associated field in the table. In our case we 
      <emphasis role="italic">showed</emphasis> 
      the field 
      <computeroutput>service.name</computeroutput> 
      and 
      <emphasis role="italic">stored</emphasis>
      the value 
      <computeroutput>service.id</computeroutput> 
      in the associated field 
      <computeroutput>orders.service_id</computeroutput>!
      The name 
      <emphasis role="bold">our_services</emphasis> 
      was defined to enable internal caching of the data, 
      which increases performance.
      </para>
      <para>
      Navigation Buttons: Because only 
      <emphasis role="italic">one</emphasis>
      customer is visible at once, the user needs a means of
      navigating between records. This functionality is provided by the
      <emphasis role="bold"><computeroutput>db:navFirstButton</computeroutput></emphasis>, 
      <emphasis role="bold"><computeroutput>db:navLastButton</computeroutput></emphasis>, 
      <emphasis role="bold"><computeroutput>db:navPrevButton</computeroutput></emphasis>,
      and 
      <emphasis role="bold"><computeroutput>db:navNextButton</computeroutput></emphasis>
      elements.  In addition, using the second set of navigation
      buttons, the user can navigate through a list of orders if there
      are more than the maxRows that are displayed in the subform.
      </para>
      <para>
      The 
      <emphasis role="bold"><computeroutput>db:navNewButton</computeroutput></emphasis>
      element navigates the user to an empty form.  This form is
      automatically created by DbForms.  It is the same as this page,
      but the fields are not populated and the insert button that we
      defined in this JSP is present but the update and delete buttons
      are not present.
      </para>
      <para>
        <figure id="Managing_orders_and_customers_with_one_single_page">
          <title>Managing customers and their orders on a single page (customer_orders.jsp)</title>
          <mediaobject>
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/managing_orders_and_customers_single.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/managing_orders_and_customers_single.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
    </sect2>

    <sect2 id="T_Complaints">
      <title>Complaints </title>
      <para>
      This page is conceptually similar to the previous JSP
      (<computeroutput>customer_orders.jsp</computeroutput>).
      It provides the user with the ability to manage customer
      complaints. The user is, once again, able to edit customer
      complaints as well as customer data, all from the same page.
      </para>
      <para>
      To establish an order of importance, every reported complaint
      must be associated with a priority level. To make
      life easier for our users, they are able to simply pick a
      priority level from a maintainable list of predefined priority
      levels.
      </para>
      <para>
        <figure id="Underlying_data_for_customer_complaints">
          <title>Underlying data for <computeroutput>customer_complaints.jsp</computeroutput></title>
          <mediaobject>
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/customer_complaint_relationships.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/customer_complaint_relationships.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      <example>
        <title>
        Code for 
        <computeroutput>customer_complaints.jsp</computeroutput>
        </title>
        <programlisting><![CDATA[
<%@ taglib uri="/WEB-INF/dbforms.tld" prefix="db" %>
<html>
<head>
  <db:base/>
</head>

<body>

  <!-- show any database errors here -->
  <db:errors/>

  <db:dbform tableName="customers" maxRows="1"
    followUp="/customer_complaints.jsp" autoUpdate="false">

  <db:header>
    <db:gotoButton caption="Menu" destination="/menu.jsp" />
    <h1>Customer Complaints</h1>
  </db:header>

  <db:body>
    <table align="center">
      <tr>
        <td>Id</td>
        <td>
          <db:textField fieldName="id" size="4"/>
        </td>
      </tr>
    <tr>
      <td>First Name</td>
      <td><db:textField fieldName="firstname" size="18"/></td>
    </tr>
    <tr>
      <td>Last Name</td>
      <td><db:textField fieldName="lastname" size="18"/></td>
    </tr>
    <tr>
      <td>Address:</td>
      <td><db:textField fieldName="address" size="25" /></td>
    </tr>
    <tr>
      <td>Postal Code - City</td>
      <td>
        <db:textField fieldName="pcode" size="6"/> -
        <db:textField fieldName="city" size="16"/>
      </td>
    </tr>
    </table>
    <br>

    <!-- table embedding the sub form -->
    <table align="center" border="1">
    <tr>
      <td>
        <center><p><b>Complaints</b></p></center>

        <!-------- sub form begin ------->
        <db:dbform tableName="complaints" maxRows="2" 
                   parentField="id" childField="customer_id" 
                   followUp="/customer_complaints.jsp"
                   autoUpdate="false">

        <db:header>
          <!-- Show existing complaints of the customer -->
          <table>
          <tr>
            <td width="40"></td>
            <td valign="top">User's Message</td>
            <td>Priority<br/><db:sort fieldName="priority"/></td>
            <td>Incoming Date<br/><db:sort 
                                    fieldName="incomingdate"/></td>
          </tr>
        </db:header>

        <db:body allowNew="true">
          <tr>
            <td width="40" valign="top">
              <db:associatedRadio name="radio_complaint" />
            </td>
            <td valign="top">
              <db:textArea fieldName="usermessage" 
                           cols="32" rows="3" wrap="virtual"/>
            </td>
            <td valign="top">
              <db:select fieldName="priority">
                <db:tableData
                  name          = "some_priorities"
                  foreignTable  = "priorities"
                  visibleFields = "shortname"
                  storeField    = "id"
                />
              </db:select>
            </td>
            <td valign="top">
              <db:textField fieldName="incomingdate" size="14"/>
            </td>
          </tr>
        </db:body>

        <db:footer>
          <tr>
            <td colspan="4" align="CENTER">
              <db:updateButton caption="Update Complaint"
                               associatedRadio="radio_complaint"/>
              <db:deleteButton caption="Delete Complaint"
                               associatedRadio="radio_complaint "/>
              <db:insertButton caption="Store New Complaint"
                               showAlways="false" />
              <db:navNewButton caption="New Complaint"
                               showAlwaysInFooter="false" />
            </td>
          </tr>
          </table>

          <br/>
          <center>
            <db:navFirstButton caption="&lt;&lt; First" />
            <db:navPrevButton caption="&lt; Previous" />
            <db:navNextButton caption="Next &gt;" />
            <db:navLastButton caption="Last &gt;&gt;" />
          </center>
        </db:footer>

        </db:dbform>
        <!-------- sub form end -------->

      </td>
    </tr>
    </table>
    <!-- end of table embedding the sub form -->

    <br>
    <center>
      <db:insertButton caption="Store New Customer"  />
      <db:updateButton caption="Update Customer"  />
      <db:deleteButton caption="Delete Customer"  />
      <db:navNewButton caption="New Customer"
                       showAlwaysInFooter="false"/>
    </center>
  </db:body>

  <db:footer>
    <br>
    <center>
      <db:navFirstButton caption="&lt;&lt; First" />
      <db:navPrevButton caption="&lt; Previous" />
      <db:navNextButton caption="Next &gt;"  />
      <db:navLastButton caption="Last &gt;&gt;" />
    </center>
  </db:footer>

  </db:dbform>
</body>
</html>
]]></programlisting>
      </example>
      <emphasis role="bold">Remarks</emphasis>
      </para>
      <para>
      In this page, the user can sort the complaints by either
      priority or by date.  The sort control boxes are placed under
      the column headings using the
      <emphasis role="bold"><computeroutput>db:sort</computeroutput></emphasis>
      element.  To use this feature on a field, the field must be defined
      as 
      <emphasis role="bold"><computeroutput>isKey</computeroutput></emphasis>
      or 
      <emphasis role="bold"><computeroutput>sortable</computeroutput></emphasis>
      in the
      <computeroutput>dbforms-config.xml</computeroutput> file.
      </para>
      <para>
      The 
      <computeroutput>usermessage</computeroutput> 
      field is very long, 255 characters.  The 
      <emphasis role="bold"><computeroutput>db:textArea</computeroutput></emphasis>
      element is used to display this field.  In our example, up to 96
      characters is displayed on three lines.
      </para>
      <para>
        <figure id="Managing_customers_and_their_complaints_with_one_single_page">
          <title>Managing customers and their complaints on a single page (customer_complaints.jsp)</title>
          <mediaobject>
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/managing_customers_complaints.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/managing_customers_complaints.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
    </sect2>

    <sect2 id="T_CustInfo">
      <title>Customer information</title>
      <para>
      This page was created by merging 
      <computeroutput>customer_orders.jsp</computeroutput>
      and 
      <computeroutput>customer_complaints.jsp</computeroutput> 
      into one file and then removing the update capabilities
      (radio buttons and update, etc. buttons).
      </para>
      <para> A new technique was used in this form.  Only excerpts of
      the code are shown in the examples below.  The complete JSP
      source code is available in the tutorial application in the
      <computeroutput>examples/tutorial</computeroutput>
      directory of the distribution.
      <example>
        <title>
        Defining a query with data from more than one table in 
        <computeroutput>dbforms-config.xml</computeroutput>
        </title>
        <programlisting><![CDATA[
   <query name="orders_and_servicenames"
          from="orders,services"
          where="orders.service_id=services.id"
          orderBy="orderdate">
     <field name="customer_id"  fieldType="int"/>
     <field name="name"         fieldType="char"/>
     <field name="orderdate"    fieldType="char"/>
   </query>
]]></programlisting>
      </example>
      <example>
        <title>
        Displaying data from more than one table in a single form 
        (<computeroutput>customers_all.jsp</computeroutput>)
        </title>
        <programlisting><![CDATA[

        <!-------- first sub form begin ------->
        <db:dbform tableName="orders_and_servicenames"
                   maxRows="2" parentField="id"
                   childField="customer_id"
                   followUp="/customer_all.jsp">

          <db:header>
            <!-- Show existing orders of services for the customer -->
            <table width="100%">
            <tr>
              <td>Service</td>
              <td>Order Date</td>
            </tr>
          </db:header>

          <db:body allowNew="false">
            <tr>
              <td>
                <db:textField fieldName="name"/>
              </td>
              <td>
                <db:textField fieldName="orderdate" size="14"/>
              </td>
            </tr>
          </db:body>

          <db:footer>
            </table>
]]></programlisting>
      </example>
      <emphasis role="bold">Remarks</emphasis>
      </para>
      <para>
      In a previous example, we used the 
      <computeroutput>db:select</computeroutput>
      element along with a
      <computeroutput>db:radioButton</computeroutput>
      element to get the names for the types of services from the
      Services table and display them in a pulldown list.  This 
      displays the name of the current value of the service
      <computeroutput>id</computeroutput>
      and allows the user to change the value.  But in
      <computeroutput>customers_all.jsp</computeroutput>
      we only want to display data rather than provide a capability 
      to update it.  We cannot use the 
      <computeroutput>db:select</computeroutput>
      and
      <computeroutput>db:radioButton</computeroutput>
      elements.  We need to use a different technique to get and
      display the names of the types of services.
      </para>
      <para>
      This technique requires an addition in the
      <computeroutput>dbforms-config.xml</computeroutput>
      file.   The
      <emphasis role="bold"><computeroutput>query</computeroutput></emphasis>
      element called
      <emphasis role="bold"><computeroutput>orders_and_servicename</computeroutput></emphasis>. 
      contains an SQL query that joins the Orders and Services tables.
      We get the data from the Orders table and the service names from
      the Services table.  Then, in the JSP, we use 
      <computeroutput>query</computeroutput> 
      in the same way that we have been using 
      <computeroutput>table</computeroutput>.  
      We reference this query in the 
      <emphasis role="bold"><computeroutput>db:dbform</computeroutput></emphasis>
      element and the field 
      <computeroutput>name</computeroutput>
      in the 
      <emphasis role="bold"><computeroutput>db:textField</computeroutput></emphasis>
      element. 
      </para>
    </sect2>
  </sect1>

  <sect1 id="T_InstallTut">
    <title>Installing the tutorial application</title>
    <para>
     A skeleton of this tutorial is located in the
     <computeroutput>examples/tutorial</computeroutput>
     directory of the distribution.  The example, however, is not
     ready to run.  This section gives the steps needed to make the
     tutorial functional. Begin by checking that all of the
     prerequisites listed in
      <emphasis role="underline"><xref linkend="prereqs"/></emphasis> 
    have been accomplished.
    </para>

  <sect2 id="T_contextTut">
    <title>Setting up the servlet context</title>
    <para>
     The tutorial needs to be included in the servlet engine's
     configuration file.  For Tomcat, a
     <computeroutput>Context</computeroutput> element has to
     be added to the <computeroutput>conf/server.xml</computeroutput>
     file.
    </para>
  </sect2>

  <sect2 id="T_dbtablesTut">
    <title>Creating database tables and loading sample data</title>
    <para>
      Next, the tables must be defined in the RDBMS and a user account
      created.  The tutorial has three subdirectories under
      <computeroutput>examples/tutorial/WEB-INF</computeroutput>
      called 
      <computeroutput>db_hsql</computeroutput>,
      <computeroutput>db_pgsql</computeroutput>,
      and
      <computeroutput>db_mysql</computeroutput>
      that provide scripts for the HSQL, PostgreSQL, and MySQL databases.
      The HSQL database is provided as a shortcut for executing the tutorial.
      By specifying that database (already specified in the tutorial
      <computeroutput>dbforms-config.xml</computeroutput>
      file), the tutorial application can be run without using any 
      other database system.
    </para>
    <para>
      To use the PostgreSQL or MySQL RDBMSs, create a tutorial
      database and a tutorial user using database tools.  Then,
      execute the appropriate
      <computeroutput>tutorial.script</computeroutput>
      file to define tables and populate some initial data for the
      application.  Changes will probably be required to use another RDBMS 
      because the 
      <computeroutput>orders</computeroutput>
      and
      <computeroutput>complaints</computeroutput>
      tables use generated keys which are non-standard.
    </para>
    <para>
      Once the database tables are created and populated, the
      <computeroutput>dbconnection</computeroutput>
      element needs to be updated to use the selected RDBMS.  Using
      the DevGui program is a good way to configure and debug this
      portion.  Once the database is reachable via DevGui, let DevGui
      write a configuration file.  The database connection element can
      then be extracted and copied to the tutorial configration file.
      Otherwise, changes to the 
      <computeroutput>dbforms-config.xml</computeroutput>
      can be made by hand.
    </para>
  </sect2>

  <sect2 id="T_dependTut">
    <title>Copying DbForms tag library and dependencies</title>
    <para>
      The final step is to copy the DbForms tag library and
      dependencies to <computeroutput>WEB-INF</computeroutput>
      directory.  The file
      <computeroutput>bin/dbforms.tld</computeroutput>
      must be copied to the 
      <computeroutput>WEB-INF</computeroutput>
      directory itself.  The file
      <computeroutput>bin/dbforms</computeroutput>
      X.Y
      <computeroutput>.jar</computeroutput>
      (where X.Y is the release number) must be copied to the
      <computeroutput>WEB-INF/lib</computeroutput>
      directory.  The contents of the
      <computeroutput>dependend</computeroutput>
      directory must also be copied to the
      <computeroutput>WEB-INF/lib</computeroutput>
      directory.
    </para>
    <para>
      The application should now be ready to run.  As a check, review
      the typical directory structure in 
        <emphasis role="underline">
          <xref linkend="typStruc"/>
        </emphasis>
      and compare it to the structure of the tutorial as you've
      modified it.
    </para>
  </sect2>

  <sect2 id="T_cautionsTut">
    <title>Final remarks</title>
    <para>
       Errors in the
       <computeroutput>dbforms-config.xml</computeroutput> file often
       cause errors in the execution of the DbForms web application.
    </para>
    <para>
       Whenever a change is made to the configuration file, it is wise
       to check the servlet engine log files for any errors listed
       there.  In particular, if an error occurs in parsing the
       configuration file, it is often the case that the database
       connection is not processed since it occurs near the end of the
       configuration file.  This means that when the application is
       executed, a database error will be reported (usually mentioning
       name=null) when the real error occurred earlier in the
       configuration file.
    </para>
    <para>
      Once there are no parse errors in the configuration file, try
      the DbForms application. The most common type of problem at this
      point is a non-working database connection.  The error reported,
      however, will be different than those described in the previous
      paragraph.
    </para>
    <para>
      If the database connection is not working, check the servlet
      engine log.  For Tomcat, this will be the
      <computeroutput>catalina.out</computeroutput>
      file.  In the case
      of Tomcat, there will usually be two tracebacks in the log.  The
      first traceback is immediately preceded by another error message that
      indicates the source of the problem such as an authentication
      error or a class-not-found error.
    </para>
    <para>
      When the configuration file is error free and the database
      connection is working, the application should come together very
      quickly.
    </para>
  </sect2>
  </sect1>

</chapter>
