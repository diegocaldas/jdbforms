<?xml version="1.0" encoding="UTF-8"?>

<!-- 

    $Header$
    $Revision$
    $Date$

    ANT BUILD.XML FOR DbForms
    =========================

    Ant is a very handy tool that uses a build file written in XML
    (this file) as building instructions. For more information refer to
    "http://jakarta.apache.org/ant/".

    To build DbForms using ant, perform the following steps:
    *) install jakarte-ant properly (tested with ant Version 1.3)
    *) set environment variable JAVA_HOME pointing to your Java Installation
    *) cd to the directory containing this build.xml file
    *) type in "ant" - this should do it!!

    Results:
    *) a .jar file containing the DbForms library
    *) a .war file for each sample app in directory /dist

    Deploy the .war files to your Servlet 2.2+ compatible servlet container!
    If you are not using mysql -> you have to edit the dbforms-config.xml file to set up the database connection
    properly.

    Remarks:

    - build-docs target in docs.xml should be run before creating the release file to include documentation


    Happy coding!
    ~~ DbForms team ~~

-->
<project name="dbforms" default="default" basedir=".">

  <property name="dbforms.version" value="v2.x" />
  <property name="cvs.workingdir" value="." />
  <property name="javasrc.dir" value="${cvs.workingdir}/src" />
  <property name="xslsrc.dir" value="${cvs.workingdir}/xsl-stylesheets" />
  <property name="etc.dir" value="${cvs.workingdir}/etc" />
  <property name="examples.dir" value="${cvs.workingdir}/examples" />
  <property name="build.dir" value="${cvs.workingdir}/target/build" />
  <property name="dist.dir" value="${cvs.workingdir}/target/dist" />
  <property name="dependend.dir" value="${cvs.workingdir}/dependend" />
  <property name="doc.dir" value="${cvs.workingdir}/doc" />
  <property name="htmldoc.dir" value="${doc.dir}/html" />
  <property name="devguidoc.dir" value="${doc.dir}/devgui" />
  <property name="taglibdoc.dir" value="${doc.dir}/taglib" />
  <property name="taglib.dir" value="${dist.dir}/taglib" />
  <property name="bin.dir" value="${cvs.workingdir}/bin" />
  <property name="textfiles.patterns" value="**/*.html,**/*.xml,**/*.java,**/*.txt,**/*.properties,**/*.xsd,**/*.xsl,**/*.bat,**/*.sh,**/*.php,**/*.properties,Readme,ReleaseNotes*,Change*,CommonMistakes,Todo" />
  <property name="javac.jvm" value="1.4"/>
  <property name="javac.deprecation" value="off"/>


  <property environment="env" />

  <!-- Indentify Classpath -->
  <path id="classpath">
    <fileset dir="${dependend.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>


  <target name="clearWorkspace">
    <delete dir="${build.dir}" />
    <mkdir dir="${build.dir}" />
  </target>


  <target name="cleanWorkspace">
    <delete dir="${build.dir}" />
  </target>


  <target name="prepare" depends="clearWorkspace">
    <delete dir="${dist.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.dir}/bin" />
  </target>

  <target name="clean">
    <delete dir="${dist.dir}" />
  </target>


  <target name="onPath">
    <condition property="path.ok">
      <and>
        <available classname="javax.servlet.jsp.JspException">
          <classpath refid="classpath" />
        </available>
        <!-- 
           - javax.sql.DataSource is included into jdk1.4.x
           - or into the jdbc2_0-stdext.jar optional package
           - (for previous jdk versions)
           -->
        <!--
           <available classname="javax.sql.DataSource">
             <classpath refid="classpath"/>
           </available>
        -->
      </and>
    </condition>
  </target>


  <target name="failIfBadPath" depends="onPath" unless="path.ok">
    <fail message="servlet.jar is missing from the classpath.  Please put this jar (usually provided by your servlet container) into your classpath or into the /dbforms/dependend directory." />
  </target>


  <!-- compile dbforms core sources -->
  <target name="compile" depends="prepare,failIfBadPath">
    <javac 
    	srcdir="${javasrc.dir}/org/dbforms" 
    	destdir="${build.dir}" 
    	debug="on" 
    	optimize="off" 
    	deprecation="${javac.deprecation}"
      source="${javac.jvm}"
      target="${javac.jvm}">
      <classpath refid="classpath" />
    </javac>
    <copy todir="${build.dir}/org/dbforms/resources">
      <fileset dir="${javasrc.dir}/org/dbforms/resources" />
    </copy>
     <copy todir="${cvs.workingdir}/target/dist">
      <fileset dir="${javasrc.dir}" />
    </copy>
    <copy todir="${cvs.workingdir}/target/dist">
      <fileset dir="${build.dir}" />
    </copy>
  </target>


  <!-- generate dbforms_x.jar library -->
  <target name="jar_classes" depends="prepare,compile" description="Build Dbforms jar">
    <jar 
    	jarfile="${dist.dir}/dbforms${dbforms.version}.jar" 
    	manifest="${etc.dir}/dbforms_manifest" 
    	basedir="${build.dir}" 
    />
  </target>


  <!-- generate taglib descriptors from taglib-docu using XSL transformation -->
  <target name="generate_taglib" depends="jar_classes" description="--&gt; Generate the taglib dbforms.tld from taglib_docu.xml">
    <echo message="begin xsl translation" />
    <style style="${etc.dir}/tld.xsl" in="${etc.dir}/taglib_docu.xml" out="${dist.dir}/dbforms.tld" />
    <replace file="${dist.dir}/dbforms.tld" token="CURRENT_VERSION" value="${dbforms.version}" />
    <echo message="end of xsl translation " />
  </target>



  <target name="default" depends="generate_taglib" />


  <!-- make an example app -->
  <target name="createExample">
    <tstamp />
    <property name="dbforms.releaseName" value="${dbforms.version}_${DSTAMP}" />
    <echo message="BUILDING EXAMPLE: ${example.name}" />
    <!-- create some workspace -->
    <antcall target="clearWorkspace" />
    <!-- copy sources to our workspace -->
    <copy todir="${build.dir}/${example.name}">
      <fileset dir="${examples.dir}/${example.name}" />
    </copy>
    <!-- copy dbforms - jar to WEB-INF/lib -->
    <copy file="${dist.dir}/dbforms${dbforms.version}.jar" todir="${build.dir}/${example.name}/WEB-INF/lib" />
    <!-- copy taglib-descriptor to WEB-INF -->
    <copy file="${dist.dir}/dbforms.tld" todir="${build.dir}/${example.name}/WEB-INF" overwrite="true" />
    <!-- copy libraries dbforms depends on to WEB-INF/lib -->
    <copy todir="${build.dir}/${example.name}/WEB-INF/lib">
      <fileset dir="${dependend.dir}" includes="*.jar" excludes="servletapi*.jar" />
    </copy>
    <delete>
       <fileset dir="${build.dir}/${example.name}/WEB-INF/lib" includes="servletapi*.jar"/>
    </delete>
    <!-- compile example-specific Java code -->
    <echo message="compiling example specific code" />
    <mkdir dir="${build.dir}/${example.name}/WEB-INF/classes" />
    <javac srcdir="${build.dir}/${example.name}/WEB-INF/src" 
           destdir="${build.dir}/${example.name}/WEB-INF/classes" 
           debug="on" 
           optimize="off" 
           deprecation="${javac.deprecation}"
           source="${javac.jvm}"
           target="${javac.jvm}">
      <classpath>
        <path refid="classpath" />
        <pathelement location="${dist.dir}/dbforms${dbforms.version}.jar" />
      </classpath>
    </javac>
    <echo message="finished compiling example specific code" />
    <!-- creating WAR file for this example -->
    <jar jarfile="${dist.dir}/${example.name}_${dbforms.releaseName}.war" basedir="${build.dir}/${example.name}" includes="*/**" />
  </target>


  <target name="createAllExamples" depends="generate_taglib" description="--&gt; Create all the examples">
    <antcall target="createExample">
      <param name="example.name" value="bugtracker" />
    </antcall>
    <antcall target="createExample">
      <param name="example.name" value="testsuite" />
    </antcall>
    <antcall target="createExample">
      <param name="example.name" value="bookstore" />
    </antcall>
    <!-- clean up temporary directories -->
    <antcall target="cleanWorkspace" />
  </target>


  <target name="devgui" depends="jar_classes" description="--&gt; Run DevGUI tool">
    <java classname="org.dbforms.devgui.DevGui" fork="true">
      <sysproperty key="DBFORMS_HOME" value="${basedir}" />
      <classpath>
        <path refid="classpath" />
        <pathelement location="${dist.dir}/dbforms${dbforms.version}.jar" />
      </classpath>
    </java>
  </target>


  <target name="style" description="--&gt; Run a stylesheet, passing in -Dstyle=mystyle.xsl" if="style">
    <style style="${xslsrc.dir}/${style}" in="${basedir}/dbforms-config.xml" out="${basedir}/temp/temp_result.xhtml" />
    <echo message="End of xsl translation " />
    <java classname="org.dbforms.xmldb.FileSplitter" fork="false">
      <arg value="${basedir}/temp/temp_result.xhtml" />
      <arg value="${deploy.dir}" />
      <classpath>
        <pathelement location="${dist.dir}/dbforms${dbforms.version}.jar" />
      </classpath>
    </java>
    <echo message="End of file splitting " />
  </target>

  <target name="copy-devgui">
    <echo message="start copy-devgui" />
    <copy    file="${bin.dir}/devgui.sh" tofile="${dist.dir}/bin/devgui.sh" overwrite="true" />
    <replace file="${dist.dir}/bin/devgui.sh" token="dbforms_CURRENT_VERSION.jar" value="dbforms${dbforms.version}.jar" />
    <copy    file="${bin.dir}/devgui.bat" tofile="${dist.dir}/bin/devgui.bat" overwrite="true" />
    <replace file="${dist.dir}/bin/devgui.bat" token="dbforms_CURRENT_VERSION.jar" value="dbforms${dbforms.version}.jar" />
  </target>


  <!-- create dbforms-releasefile -->
  <target name="createReleaseFile" depends="createAllExamples,copy-devgui">
    <tstamp />
    <property name="dbforms.releaseName" value="${dbforms.version}_${DSTAMP}" />
    <zip destfile="dbforms${dbforms.releaseName}.zip">
      <zipfileset dir="." prefix="dbforms${dbforms.releaseName}" includes="ChangeLog Changes_v1_0  Changes_v1_1  CommonMistakes license.txt Readme Todo build.xml ReleaseNotes*.txt" />
      <zipfileset dir="." prefix="dbforms${dbforms.releaseName}" includes="doc/**/*.html,doc/**/*.png,doc/**/*.gif,doc/**/*.jpg,doc/**/*.txt,doc/**/*.pdf" />
      <zipfileset dir="." prefix="dbforms${dbforms.releaseName}" includes="dist/*.tld  dist/*.jar" />
      <zipfileset dir="${dist.dir}/bin" prefix="dbforms${dbforms.releaseName}/bin" includes="devgui.bat devgui.sh" />
      <zipfileset dir="." prefix="dbforms${dbforms.releaseName}" includes="etc/*.xml etc/*.xsl" />
      <zipfileset dir="${dist.dir}" prefix="dbforms${dbforms.releaseName}/examples" includes="*.war" />
      <zipfileset dir="." prefix="dbforms${dbforms.releaseName}" includes="examples/*.txt" />
      <zipfileset dir="." prefix="dbforms${dbforms.releaseName}" includes="src/org/**/*.java" />
      <zipfileset dir="." prefix="dbforms${dbforms.releaseName}" includes="temp/*.txt" />
      <zipfileset dir="." prefix="dbforms${dbforms.releaseName}" includes="xsl-stylesheets/*.xsl" />
      <zipfileset dir="." prefix="dbforms${dbforms.releaseName}" includes="misc/**/*.gif  misc/**/*.png  misc/**/*.js   misc/**/*.txt misc/*.css misc/**/*.html" />
    </zip>
  </target>

  <!-- create lib  -->
  <target name="createLibFile" depends="jar_classes, generate_taglib">
    <tstamp />
    <property name="dbforms.releaseName" value="${dbforms.version}_${DSTAMP}" />
    <zip destfile="${dist.dir}/dbforms_jaronly_${dbforms.releaseName}.zip">
      <zipfileset dir="${dist.dir}" includes="dbforms*.jar dbforms*.tld" />
    </zip>
  </target>

  <!-- create dbforms-releasefiles, one zip file with dos/win lineends, one tgz file with *nix lineends: -->
  <target name="createReleaseFiles" depends="createAllExamples,copy-devgui" description="--&gt; Create zip and tgz release files">
    <tstamp />
    <property name="dbforms.releaseName" value="${dbforms.version}_${DSTAMP}" />
    <property name="dbforms.releaseDir" value="${dist.dir}/dbforms_${dbforms.releaseName}" />
    <property name="dbforms.zipfilename" value="${dist.dir}/dbforms_${dbforms.releaseName}.zip" />
    <property name="dbforms.tarfilename" value="${dist.dir}/dbforms_${dbforms.releaseName}.tar" />
    <property name="dbforms.tgzfilename" value="${dist.dir}/dbforms_${dbforms.releaseName}.tgz" />
    <!-- temporary directory for release files: -->
    <delete dir="${dbforms.releaseDir}" />
    <mkdir dir="${dbforms.releaseDir}" />
    <!-- copy all files needed to release directory -->
    <copy todir="${dbforms.releaseDir}">
      <fileset dir="." includes="ChangeLog Changes_v1_0  Changes_v1_1  CommonMistakes  license.txt" />
      <fileset dir="." includes="Readme  Todo  build.xml ReleaseNotes*.txt" />
      <fileset dir="." includes="doc/**/*.html,doc/**/*.png,doc/**/*.gif,doc/**/*.jpg,doc/**/*.txt,doc/**/*.pdf,doc/**/*.css" />
      <fileset dir="." includes="dist/*.tld  dist/*.jar" />
      <fileset dir="." includes="articles/**/*" />
      <fileset dir="." includes="contrib/**/*" />
      <fileset dir="." includes="etc/dbforms_manifest etc/*.xml etc/*.xsl" />
      <fileset dir="." includes="examples/**/*" excludes="**/tools.jar" />
      <fileset dir="." includes="src/org/**/*.java,src/org/**/*.properties,src/org/**/*.xsd,src/org/**/*.xml" />
      <fileset dir="." includes="temp/*.txt" />
      <fileset dir="." includes="xsl-stylesheets/*.xsl" />
      <fileset dir="." includes="misc/**/*.gif  misc/**/*.png  misc/**/*.js   misc/**/*.txt misc/*.css misc/**/*.html" />
    </copy>
    <copy todir="${dbforms.releaseDir}/dependend">
      <fileset dir="./dependend" includes="**/*.jar"/>
    </copy>
    <delete file="${dbforms.releaseDir}/dependend/*.jar"/>
    <copy todir="${dbforms.releaseDir}/dependend">
      <fileset dir="${dependend.dir}" includes="*.jar" excludes="servletapi*.jar jsp-api*.jar"/>
    </copy>
    <copy todir="${dbforms.releaseDir}/bin">
      <fileset dir="${dist.dir}/bin" includes="*" />
    </copy>
    <copy todir="${dbforms.releaseDir}/bin">
      <fileset dir="${dist.dir}" includes="*.tld,*.jar" />
    </copy>
    <!-- modify all text files to have dos/win lineends -->
    <echo message="modifying temporary files to contain dos/win lineends" />
    <fixcrlf srcDir="${dbforms.releaseDir}" eol="crlf" includes="${textfiles.patterns}" />
    <!-- create zip release: -->
    <delete file="${dbforms.zipfilename}" />
    <zip destfile="${dbforms.zipfilename}">
      <zipfileset dir="${dist.dir}" includes="dbforms_${dbforms.releaseName}/**" />
    </zip>
    <!-- modify all text files to have unix lineends -->
    <echo message="modifying temporary files to contain *nix/linux lineends" />
    <fixcrlf srcDir="${dbforms.releaseDir}" eol="lf" includes="${textfiles.patterns}" />
    <!-- create tar release, make shell scripts executable: -->
    <delete file="${dbforms.tarfilename}" />
    <tar destfile="${dbforms.tarfilename}">
      <tarfileset dir="${dist.dir}" includes="dbforms_${dbforms.releaseName}/**" excludes="dbforms_${dbforms.releaseName}/**/*.sh" />
      <tarfileset dir="${dist.dir}" includes="dbforms_${dbforms.releaseName}/**/*.sh" mode="755" />
    </tar>
    <!-- compress tarfile using gzip, delete intermediate tar file: -->
    <gzip zipfile="${dbforms.tgzfilename}" src="${dbforms.tarfilename}" />
    <delete file="${dbforms.tarfilename}" />
    <delete dir="${dbforms.releaseDir}" />
    <delete dir="${dist.dir}/bin" />
    <delete>
       <fileset dir="${dist.dir}" includes="dbforms*.jar dbforms*.tld" />
    </delete>

  </target>


  <target name="forcedos">
    <echo message="forcedos for all text files" />
    <fixcrlf srcDir="${cvs.workingdir}" eol="crlf" includes="${textfiles.patterns}" />
  </target>



  <target name="format">
    <echo message="formats the sources" />
      <taskdef name="jalopy"
               classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
        <classpath>
          <fileset dir="${env.JALOPY_HOME}/lib">
            <include name="*.jar" />
          </fileset>
        </classpath>
      </taskdef>


    <!--

      Invokes Jalopy as follows:
      - All formatted files will have unix fileformat (\n)
      - Load your code convention from the given url
      - Override the convention to use the file history feature
      - Override the convention to use alder32 checksums of files for history testing
      - Override the convention to use loglevel "info"
      - Override the convention to use 2 threads
      - The import optimization feature will work (if enabled in the active
        convention), because a classpath reference is specified

        Don't forget to setup an include pattern as Jalopy truly expects
        valid Java source files as input!

      -->
      <jalopy fileformat="dos"
            convention="${cvs.workingdir}/jalopy-turbine.xml"
            loglevel="info"
            threads="2"
      >
      <fileset dir="${cvs.workingdir}">
        <include name="**/*.java" />
      </fileset>
    </jalopy>

  </target>



  <!-- =================================================================== -->
  <!-- Maven integration: generate project documentation and copy it into  -->
  <!-- the target directory                                                -->
  <!--                                                                     -->
  <!-- called by Maven's "dist" goal                                        -->
  <!-- =================================================================== -->
  <target name="maven-build-release"   depends="createLibFile, createReleaseFiles" />


  <target name="maven-build-bookstore" depends="generate_taglib" >
    <antcall target="createExample">
      <param name="example.name" value="bookstore" />
    </antcall>
  </target>
    
</project>
