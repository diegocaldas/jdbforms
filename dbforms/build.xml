<project name="dbforms" default="createReleaseFiles" basedir=".">

    <!-- 

$Header$
$Revision$
$Date$

ANT BUILD.XML FOR DbForms
=========================

Ant is a very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/".

To build DbForms using ant, perform the following steps:
*) install jakarte-ant properly (tested with ant Version 1.3)
*) set environment variable JAVA_HOME pointing to your Java Installation
*) cd to the directory containing this build.xml file
*) type in "ant" - this should do it!!

Results:
*) a .jar file containing the DbForms library
*) a .war file for each sample app in directory /dist

Deploy the .war files to your Servlet 2.2+ compatible servlet container!
If you are not using mysql -> you have to edit the dbforms-config.xml file to set up the database connection
properly.

Remarks:

 - target 'generate_taglib_pdfdocs' uses Apache Formatting Objects Processor
   (FOP) that can be found at http://xml.apache.org/fop/index.html.
   I used Version FOP-0.20.4, older versions may make some problems
   because some attributes seem to be renamed. After installing FOP
   and before calling 'ant generate_taglib_pdfdocs' you have to
   set environment variable FOP_HOME to location of FOP installation.
   
Happy coding!
~~ DbForms team ~~

-->

    <property name="dbforms.version" value="_v1_1_3pr1"/>

    <property name="cvs.workingdir" value="."/>

    <property name="javasrc.dir" value="${cvs.workingdir}/src"/>
    <property name="xslsrc.dir" value="${cvs.workingdir}/xsl-stylesheets"/>
    <property name="etc.dir" value="${cvs.workingdir}/etc"/>
    <property name="examples.dir" value="${cvs.workingdir}/examples"/>
    <property name="build.dir" value="${cvs.workingdir}/build"/>
    <property name="dist.dir" value="${cvs.workingdir}/dist"/>
    <property name="dependend.dir" value="${cvs.workingdir}/dependend"/>
    <property name="doc.dir" value="${cvs.workingdir}/doc"/>
    <property name="htmldoc.dir" value="${doc.dir}/html"/>
    <property name="devguidoc.dir" value="${doc.dir}/devgui"/>
    <property name="taglibdoc.dir" value="${doc.dir}/taglib"/>
    <property name="bin.dir" value="${cvs.workingdir}/bin"/>
    <property environment="env"/>

    <!-- Indentify Classpath -->
    <path id="classpath">
        <fileset dir="${dependend.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>


    <target name="clearWorkspace">
        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>

    <target name="cleanWorkspace">
        <delete dir="${build.dir}"/>
    </target>

    <target name="prepare" depends="clearWorkspace">
        <delete dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>

    <target name="onPath">
        <condition property="path.ok">
            <and>
                <available classname="javax.servlet.jsp.JspException" >
                    <classpath refid="classpath"/>
                </available>

                <!-- 
                   - javax.sql.DataSource is included into jdk1.4.x
                   - or into the jdbc2_0-stdext.jar optional package
                   - (for previous jdk versions)
                   -->
                <!--
                    <available classname="javax.sql.DataSource">
                        <classpath refid="classpath"/>
                    </available>
                -->
            </and>
        </condition>
    </target>
    
    <target name="failIfBadPath" depends="onPath" unless="path.ok">
        <fail message="servlet.jar is missing from the classpath.  Please put this jar (usually provided by your servlet container) into your classpath or into the /dbforms/dependend directory."/>
    </target>    


    <!-- compile dbforms core sources -->
    <target name="compile" depends="prepare,failIfBadPath">


        <!-- Required when building in eclipse (WSAD) -->
        <available classname="org.eclipse.core.launcher.Main" property="build.compiler" value="org.eclipse.pde.internal.core.JDTCompilerAdapter" classpath="${java.class.path}"/>

        <javac srcdir="${javasrc.dir}/org/dbforms" destdir="${build.dir}" debug="on" optimize="off" deprecation="off">
            <classpath refid="classpath"/>
        </javac>
    </target>


    <!-- generate dbforms_x.jar library -->
    <target name="jar_classes" depends="prepare,compile" description="--> Build Dbforms jar">
        <jar jarfile="${dist.dir}/dbforms${dbforms.version}.jar" manifest="${etc.dir}/dbforms_manifest" basedir="${build.dir}"/>
    </target>


    <!-- generate taglib descriptors from taglib-docu using XSL transformation -->
    <target name="generate_taglib" depends="jar_classes" description="--> Generate the taglib dbforms.tld from taglib_docu.xml">
        <echo message="begin xsl translation"/>
        <style style="${etc.dir}/tld.xsl" in="${etc.dir}/taglib_docu.xml" out="${dist.dir}/dbforms.tld"/>
        <echo message="end of xsl translation "/>
    </target>

    <!-- generate HTM reference documentation from taglib-docu using XSL transformation -->
    <target name="generate_taglib_htmldocs" 
                    description="--> Generate  HTML reference documentation within doc/html from taglib-docu.xml" >
        <echo message="begin xsl translation to generate HTML documentation  "/>
        
        <delete file="${taglibdoc.dir}/DbFormsTags.html"/>
        <style style="${etc.dir}/tldoc2html.xsl" in="${etc.dir}/taglib_docu.xml" 
              out="${taglibdoc.dir}/DbFormsTags.html"/>
              
        <delete file="${taglibdoc.dir}/DbFormsTags_TocSem.html"/>
        <style style="${etc.dir}/tldoc2html_toc.xsl" in="${etc.dir}/taglib_docu.xml" 
               out="${taglibdoc.dir}/DbFormsTags_TocSem.html"/>
               
        <delete file="${taglibdoc.dir}/DbFormsTags_TocAlph.html"/>
        <style style="${etc.dir}/tldoc2html_toc.xsl" in="${etc.dir}/taglib_docu.xml" 
               out="${taglibdoc.dir}/DbFormsTags_TocAlph.html">
            <param name="sortTagsAlphabetically" expression="true"/>
        </style>
        <echo message="end of xsl translation "/>
    </target>

    <!-- generate PDF reference documentation from taglib-docu using XSL transformation and FOP -->
    <!-- fisrt, check if the FOP_HOME env var points to a directory -->
    <target name="generate_taglib_pdfdocs_check">
      <condition property="pdf.ok">
        <available file="${env.FOP_HOME}" />        
      </condition>
    </target>

    <!-- ... if not, display this error message -->
    <target name="generate_taglib_pdfdocs_msg" 
            unless="pdf.ok"
            depends="generate_taglib_pdfdocs_check">
      <echo message="cannot build the PDF documentation. Please install FOP (http://xml.apache.org/fop) and set the FOP_HOME env var" />
    </target>

    <!-- this is the real PDF task -->
    <target name    = "generate_taglib_pdfdocs"
            depends = "generate_taglib_pdfdocs_msg"
            if      = "pdf.ok"
            description="--> Generate PDF reference documentation from taglib-docu.xml (FOP_HOME must be set)" >
 
        <echo message="begin xsl translation to generate xsl-fo   "/>
        <style style="${etc.dir}/tldoc2xsl-fo.xsl" 
               in="${etc.dir}/taglib_docu.xml" 
               out="${etc.dir}/DbFormsTags.xsl-fo"/>
        <echo message="end of xsl translation "/>

        <echo message="starting generation of ${doc.dir}/DbFormsTags.pdf using Apache FOP (FOP_HOME must be set)"/>
        <path id="fopclasspath">      <!-- set classpath according to FOP_HOME -->
           <fileset dir="${env.FOP_HOME}/lib/">
               <include name="*.jar"/>
           </fileset>
           <fileset dir="${env.FOP_HOME}/build/">
               <include name="*.jar"/>
           </fileset>
        </path>

        <java classname="org.apache.fop.apps.Fop" 
           fork="true" jvm="${java.home}/bin/java" >
           <arg line=" ${etc.dir}/DbFormsTags.xsl-fo ${doc.dir}/DbFormsTags.pdf"/>
           <classpath refid="fopclasspath"/>
        </java>
        <echo message="end of PDF generation, output file is ${doc.dir}/DbFormsTags.pdf"/>
     </target>
    
    <!-- make an example app -->

    <target name="createExample">

        <echo message="BUILDING EXAMPLE: ${example.name}"/>

        <!-- create some workspace -->
        <antcall target="clearWorkspace"/>

        <!-- copy sources to our workspace -->
        <copy todir="${build.dir}/${example.name}">
            <fileset dir="${examples.dir}/${example.name}"/>
        </copy>

        <!-- copy dbforms - jar to WEB-INF/lib -->
        <copy file="${dist.dir}/dbforms${dbforms.version}.jar" todir="${build.dir}/${example.name}/WEB-INF/lib"/>

        <!-- copy taglib-descriptor to WEB-INF -->
        <copy file="${dist.dir}/dbforms.tld" todir="${build.dir}/${example.name}/WEB-INF"/>

        <!-- copy libraries dbforms depends on to WEB-INF/lib -->
        <copy todir="${build.dir}/${example.name}/WEB-INF/lib">
            <fileset dir="${dependend.dir}"/>
        </copy>
        
        <!-- xerces.jar, xalan.jar might be neccessary for other tasks, but are disturbing with tomcat 4 -->
        <!-- FIXME: must be documented what do do with other servers.... -->
        <delete file="${build.dir}/${example.name}/WEB-INF/lib/xerces.jar"/>
        <delete file="${build.dir}/${example.name}/WEB-INF/lib/xalan.jar"/>
       
        <!-- compile example-specific Java code -->
        <echo message="compiling example specific code"/>
        <mkdir dir="${build.dir}/${example.name}/WEB-INF/classes"/>
        <javac srcdir="${build.dir}/${example.name}/src" destdir="${build.dir}/${example.name}/WEB-INF/classes" debug="on" optimize="off" deprecation="off">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${dist.dir}/dbforms${dbforms.version}.jar"/>
            </classpath>
        </javac>
        <echo message="finished compiling example specific code"/>

        <!-- creating WAR file for this example -->
        <jar jarfile="${dist.dir}/${example.name}.war" basedir="${build.dir}/${example.name}" includes="*/**"/>
    </target>


    <target name="createAllExamples" depends="generate_taglib" description="--> Create all the examples">
        <antcall target="createExample">
            <param name="example.name" value="bugtracker"/>
        </antcall>

        <antcall target="createExample">
            <param name="example.name" value="testsuite"/>
        </antcall>

        <!-- clean up temporary directories -->
        <antcall target="cleanWorkspace"/>

    </target>
    
    <target name="devgui" description="--> Run DevGUI tool">
        <java classname="org.dbforms.devgui.DevGui" fork="true" >
            <sysproperty key="DBFORMS_HOME" value="${basedir}"/>    
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${dist.dir}/dbforms${dbforms.version}.jar"/>
            </classpath>
       </java>
   </target>    
   
   <target name="style" description="--> Run a stylesheet, passing in -Dstyle=mystyle.xsl" if="style">
        <style style="${xslsrc.dir}/${style}" in="${basedir}/dbforms-config.xml" out="${basedir}/temp/temp_result.xhtml"/>
        <echo message="End of xsl translation "/>

        <java classname="org.dbforms.xmldb.FileSplitter" fork="false" >
            <arg value="${basedir}/temp/temp_result.xhtml"/>
            <arg value="${deploy.dir}"/>
            <classpath>
                <pathelement location="${dist.dir}/dbforms${dbforms.version}.jar"/>
            </classpath>
        </java>
        <echo message="End of file splitting "/>
    </target>   

  <target name="copy-devgui">
      <copy file="${bin.dir}/devgui.sh" 
            tofile="${dist.dir}/bin/devgui.sh" overwrite="true"/>
      <replace file="${dist.dir}/bin/devgui.sh"
          token="dbforms_CURRENT_VERSION.jar" 
          value="dbforms${dbforms.version}.jar" />
      <copy file="${bin.dir}/devgui.bat" 
            tofile="${dist.dir}/bin/devgui.bat" overwrite="true"/>
      <replace file="${dist.dir}/bin/devgui.bat"
          token="dbforms_CURRENT_VERSION.jar"
          value="dbforms${dbforms.version}.jar"/>
   </target>    


  <!--
    -  JAVADOC TARGET
    -
    -  Build the API javadoc documentation.
    -->
  <target name="javadoc">
    <javadoc packagenames = "org.dbforms.*"
             sourcepath   = "${javasrc.dir}"
             destdir      = "${doc.dir}/api"
             author       = "true"
             version      = "true"
             use          = "true"
             windowtitle  = "DbForms API"
             doctitle     = "DbForms API"
             bottom       = "DbForms API"
             private      = "false">

      <classpath refid="classpath"/>

      <!-- external links to the javadocs api -->
      <link href="http://java.sun.com/j2se/1.3/docs/api/"                   />
      <link href="http://java.sun.com/products/jdbc/jdbc20.stdext.javadoc/" />
      <link href="http://java.sun.com/products/servlet/2.2/javadoc/"        />
      <link href="http://xml.apache.org/xerces2-j/javadocs/api/"            />
      <link href="http://xml.apache.org/xalan-j/apidocs/"                   />
    </javadoc>
  </target>
 
  <target name="build-doc"
      depends="javadoc, generate_taglib_htmldocs, generate_taglib_pdfdocs"
  />

     <!-- create dbforms-releasefile -->
    <target name="createReleaseFile" depends="createAllExamples,copy-devgui, build-doc"  >
          
        <tstamp/>
        <property name="dbforms.releaseName" value="${dbforms.version}_${DSTAMP}"/>

      <zip destfile="dbforms${dbforms.releaseName}.zip" >
        <zipfileset dir="."          prefix="dbforms${dbforms.releaseName}"         includes="Changes_v1_0  Changes_v1_1  CommonMistakes  License  Readme  Readme_DevGui  Todo  build.xml ReleaseNotes_v1_1_3pr1.txt "/>
        <zipfileset dir="."          prefix="dbforms${dbforms.releaseName}"         includes="doc/**/*.html,doc/**/*.png,doc/**/*.gif,doc/**/*.jpg,doc/**/*.txt,doc/**/*.pdf"/>
        <zipfileset dir="."          prefix="dbforms${dbforms.releaseName}"         includes="dist/*.tld  dist/*.jar"/>
        <zipfileset dir="./dist/bin" prefix="dbforms${dbforms.releaseName}/bin"     includes="devgui.bat devgui.sh"/>
        <zipfileset dir="."          prefix="dbforms${dbforms.releaseName}"         includes="etc/*.xml etc/*.xsl"/>
        <zipfileset dir="./dist"     prefix="dbforms${dbforms.releaseName}/examples"    includes="*.war"/>
        <zipfileset dir="."          prefix="dbforms${dbforms.releaseName}"         includes="examples/*.txt"/>
        <zipfileset dir="."          prefix="dbforms${dbforms.releaseName}"         includes="src/org/**/*.java"/>
        <zipfileset dir="."          prefix="dbforms${dbforms.releaseName}"         includes="temp/*.txt"/>
        <zipfileset dir="."          prefix="dbforms${dbforms.releaseName}"         includes="xsl-stylesheets/*.xsl"/>
        <zipfileset dir="."          prefix="dbforms${dbforms.releaseName}"         includes="misc/**/*.gif  misc/**/*.png  misc/**/*.js   misc/**/*.txt misc/*.css misc/**/*.html"/>                     
       </zip>
    </target>

    <!-- create dbforms-releasefiles, one zip file with dos/win lineends, one tgz file with *nix lineends: -->
  <target name="createReleaseFiles" depends="createAllExamples,copy-devgui, build-doc"
                    description="--> Create zip and tgz release files" >  
          
      <tstamp/>
      <property name="dbforms.releaseName" value="${dbforms.version}_${DSTAMP}"/>
      <property name="dbforms.releaseDir" value="${dist.dir}/dbforms${dbforms.releaseName}"/>
      <property name="dbforms.zipfilename" value="${dist.dir}/dbforms${dbforms.releaseName}.zip"/>
      <property name="dbforms.tarfilename" value="${dist.dir}/dbforms${dbforms.releaseName}.tar"/>
      <property name="dbforms.tgzfilename" value="${dist.dir}/dbforms${dbforms.releaseName}.tgz"/>

              <!-- temporary directory for release files: -->
      <delete dir="${dbforms.releaseDir}"/>
      <mkdir dir="${dbforms.releaseDir}"/>

              <!-- copy all files needed to release directory -->
      <copy todir="${dbforms.releaseDir}" >
        <fileset dir="." includes="Changes_v1_0  Changes_v1_1  CommonMistakes  License"/>
        <fileset dir="." includes="Readme  Readme_DevGui  Todo  build.xml ReleaseNotes_v1_1_3pr1.txt"/>
        <fileset dir="." includes="doc/**/*.html,doc/**/*.png,doc/**/*.gif,doc/**/*.jpg,doc/**/*.txt,doc/**/*.pdf"/>
        <fileset dir="." includes="dist/*.tld  dist/*.jar"/>
        <fileset dir="." includes="etc/*.xml etc/*.xsl"/>
        <fileset dir="." includes="examples/*.txt"/>
        <fileset dir="." includes="src/org/**/*.java"/>
        <fileset dir="." includes="temp/*.txt"/>
        <fileset dir="." includes="xsl-stylesheets/*.xsl"/>
        <fileset dir="." includes="misc/**/*.gif  misc/**/*.png  misc/**/*.js   misc/**/*.txt misc/*.css misc/**/*.html"/>
     </copy>

     <copy todir="${dbforms.releaseDir}/bin" >
        <fileset dir="./dist/bin" includes="devgui.bat devgui.sh"/>
     </copy>

     <copy todir="${dbforms.releaseDir}/examples">
          <fileset dir="./dist"     includes="*.war"/>
     </copy>

     <copy todir="${dbforms.releaseDir}/dist">
          <fileset dir="./dist"     includes="*.tld,*.jar"/>
     </copy>

             <!-- modify all text files to have dos/win lineends -->
     <property name="textfiles.patterns" value="**/*.html,**/*.xml,**/*.java,**/*.txt,**/*.xsl,**/*.bat,**/*.sh,Changes*,CommonMistakes,License,Todo" />

     <echo message="modifying temporary files to contain dos/win lineends"/>
     <fixcrlf srcDir="${dbforms.releaseDir}" eol="crlf" includes="${textfiles.patterns}" />

             <!-- create zip release: -->
     <delete file="${dbforms.zipfilename}"/>
     <zip destfile="${dbforms.zipfilename}" >
        <zipfileset dir="${dist.dir}"   includes="dbforms${dbforms.releaseName}/**"/>
     </zip>

             <!-- modify all text files to have unix lineends -->
     <echo message="modifying temporary files to contain *nix/linux lineends"/>
     <fixcrlf srcDir="${dbforms.releaseDir}" eol="lf"  includes="${textfiles.patterns}" />
     
             <!-- create tar release, make shell scripts executable: -->
     <delete file="${dbforms.tarfilename}"/>
     <tar destfile="${dbforms.tarfilename}" >
        <tarfileset dir="${dist.dir}"   includes="dbforms${dbforms.releaseName}/**" 
                                        excludes="dbforms${dbforms.releaseName}/**/*.sh" />
        <tarfileset dir="${dist.dir}"   includes="dbforms${dbforms.releaseName}/**/*.sh" mode="755"/>
     </tar>

             <!-- compress tarfile using gzip, delete intermediate tar file: -->
     <gzip zipfile="${dbforms.tgzfilename}" src="${dbforms.tarfilename}"/>
     <delete file="${dbforms.tarfilename}" />

    </target>
    
</project>
