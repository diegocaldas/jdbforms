/*
 * $Header$
 * $Revision$
 * $Date$
 *
 * DbForms - a Rapid Application Development Framework
 * Copyright (C) 2001 Joachim Peer <joepeer@excite.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 */
package org.dbforms.bookstore;
import org.dbforms.util.AbstractHttpTestCase;
import org.dbforms.util.KeyValuePair;
import org.dbforms.util.MessageResources;
import org.dbforms.util.MessageResourcesInternal;

import java.util.ArrayList;

// package
// This class was generated by MaxQ (maxq.tigris.org)
// imports
import java.util.List;
import java.util.Locale;



// definition of test class
public class TestSearchAndCalcFields extends AbstractHttpTestCase {
   private String nodata = null;

   // Test method generated from the MaxQ Java generator
   public TestSearchAndCalcFields(String name) {
      super(name);

      if (nodata == null) {
         MessageResources.setSubClass("resources");
         nodata = MessageResourcesInternal.getMessage("dbforms.nodata",
               Locale.getDefault());
      }

      println("nodata is " + nodata);
   }

   /**
    * DOCUMENT ME!
    *
    * @throws Exception DOCUMENT ME!
    */
   public void testTestSearchAndCalcFields() throws Exception {
      List list;
      get("http://localhost/bookstore/tests/testSearchAndCalcFields.jsp");
      printResponse();
      assertTrue(responseContains(
            "1&nbsp;1&nbsp;3-423-12445-4&nbsp;Die Insel des vorigen Tages&nbsp;" + nodata + "&nbsp;+-3-423-12445-4-CALC-Die Insel des vorigen Tages-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "2&nbsp;2&nbsp;3-423-12445-5&nbsp;Das Foucaltsche Pendel&nbsp;" + nodata + "&nbsp;+-3-423-12445-5-CALC-Das Foucaltsche Pendel-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "3&nbsp;3&nbsp;42-1&nbsp;Hijacking through the Galaxy 1&nbsp;" + nodata + "&nbsp;+-42-1-CALC-Hijacking through the Galaxy 1-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "4&nbsp;4&nbsp;42-2&nbsp;Hijacking through the Galaxy 2&nbsp;" + nodata + "&nbsp;+-42-2-CALC-Hijacking through the Galaxy 2-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "5&nbsp;5&nbsp;42-3&nbsp;Hijacking through the Galaxy 3&nbsp;" + nodata + "&nbsp;+-42-3-CALC-Hijacking through the Galaxy 3-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "6&nbsp;6&nbsp;42-4&nbsp;Hijacking through the Galaxy 4&nbsp;" + nodata + "&nbsp;+-42-4-CALC-Hijacking through the Galaxy 4-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "7&nbsp;8&nbsp;42-5&nbsp;Luca's favorite thing to eat is  &quot;delicious Italian pasta&quot;&nbsp;[NULL]&nbsp;+-42-5-CALC-Luca's favorite thing to eat is  &quot;delicious Italian pasta&quot;-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "8&nbsp;9&nbsp;42-6&nbsp;Hijacking through the Galaxy 6&nbsp;" + nodata + "&nbsp;+-42-6-CALC-Hijacking through the Galaxy 6-+&nbsp;<br/>"));

      list = new ArrayList();
      list.add(new KeyValuePair("invtable", "2"));
      list.add(new KeyValuePair("invname_2", ""));
      list.add(new KeyValuePair("autoupdate_2", "false"));
      list.add(new KeyValuePair("fu_2", "/tests/testSearchAndCalcFields.jsp"));
      list.add(new KeyValuePair("lang", "de"));
      list.add(new KeyValuePair("source",
            "/bookstore/tests/testSearchAndCalcFields.jsp"));
      list.add(new KeyValuePair("customEvent", ""));
      list.add(new KeyValuePair("firstpos_2", "0%3A1%3A1"));
      list.add(new KeyValuePair("lastpos_2", "0%3A1%3A9"));
      list.add(new KeyValuePair("psearch_2_1000", "#,##0"));
      list.add(new KeyValuePair("searchalgo_2_1000", "sharp"));
      list.add(new KeyValuePair("searchmode_2_1000", "and"));
      list.add(new KeyValuePair("search_2_1000", "2"));
      list.add(new KeyValuePair("k_2_0@root", "0%3A1%3A1"));
      list.add(new KeyValuePair("k_2_1@root", "0%3A1%3A2"));
      list.add(new KeyValuePair("k_2_2@root", "0%3A1%3A3"));
      list.add(new KeyValuePair("k_2_3@root", "0%3A1%3A4"));
      list.add(new KeyValuePair("k_2_4@root", "0%3A1%3A5"));
      list.add(new KeyValuePair("k_2_5@root", "0%3A1%3A6"));
      list.add(new KeyValuePair("k_2_6@root", "0%3A1%3A7"));
      list.add(new KeyValuePair("k_2_7@root", "0%3A1%3A8"));
      list.add(new KeyValuePair("k_2_8@root", "0%3A1%3A9"));
      post("http://localhost/bookstore/servlet/control", list);
      printResponse();
      assertTrue(responseContains(
            "1&nbsp;3&nbsp;42-1&nbsp;Hijacking through the Galaxy 1&nbsp;" + nodata + "&nbsp;+-42-1-CALC-Hijacking through the Galaxy 1-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "2&nbsp;4&nbsp;42-2&nbsp;Hijacking through the Galaxy 2&nbsp;" + nodata + "&nbsp;+-42-2-CALC-Hijacking through the Galaxy 2-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "3&nbsp;5&nbsp;42-3&nbsp;Hijacking through the Galaxy 3&nbsp;" + nodata + "&nbsp;+-42-3-CALC-Hijacking through the Galaxy 3-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "4&nbsp;6&nbsp;42-4&nbsp;Hijacking through the Galaxy 4&nbsp;" + nodata + "&nbsp;+-42-4-CALC-Hijacking through the Galaxy 4-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "5&nbsp;8&nbsp;42-5&nbsp;Luca's favorite thing to eat is  &quot;delicious Italian pasta&quot;&nbsp;" + nodata + "&nbsp;+-42-5-CALC-Luca's favorite thing to eat is  &quot;delicious Italian pasta&quot;-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "6&nbsp;9&nbsp;42-6&nbsp;Hijacking through the Galaxy 6&nbsp;" + nodata + "&nbsp;+-42-6-CALC-Hijacking through the Galaxy 6-+&nbsp;<br/>"));

      list = new ArrayList();
      list.add(new KeyValuePair("invtable", "2"));
      list.add(new KeyValuePair("invname_2", ""));
      list.add(new KeyValuePair("autoupdate_2", "false"));
      list.add(new KeyValuePair("fu_2", "/tests/testSearchAndCalcFields.jsp"));
      list.add(new KeyValuePair("lang", "de"));
      list.add(new KeyValuePair("source",
            "/bookstore/tests/testSearchAndCalcFields.jsp"));
      list.add(new KeyValuePair("customEvent", ""));
      list.add(new KeyValuePair("firstpos_2", "0%3A1%3A3"));
      list.add(new KeyValuePair("lastpos_2", "0%3A1%3A9"));
      list.add(new KeyValuePair("psearch_2_1000", "#,##0"));
      list.add(new KeyValuePair("searchalgo_2_1000", "sharp"));
      list.add(new KeyValuePair("searchmode_2_1000", "and"));
      list.add(new KeyValuePair("search_2_1000", "1"));
      list.add(new KeyValuePair("k_2_0@root", "0%3A1%3A3"));
      list.add(new KeyValuePair("k_2_1@root", "0%3A1%3A4"));
      list.add(new KeyValuePair("k_2_2@root", "0%3A1%3A5"));
      list.add(new KeyValuePair("k_2_3@root", "0%3A1%3A6"));
      list.add(new KeyValuePair("k_2_4@root", "0%3A1%3A8"));
      list.add(new KeyValuePair("k_2_5@root", "0%3A1%3A9"));
      post("http://localhost/bookstore/servlet/control", list);
      printResponse();
      assertTrue(responseContains(
            "1&nbsp;1&nbsp;3-423-12445-4&nbsp;Die Insel des vorigen Tages&nbsp;" + nodata + "&nbsp;+-3-423-12445-4-CALC-Die Insel des vorigen Tages-+&nbsp;<br/>"));
      assertTrue(responseContains(
            "2&nbsp;2&nbsp;3-423-12445-5&nbsp;Das Foucaltsche Pendel&nbsp;" + nodata + "&nbsp;+-3-423-12445-5-CALC-Das Foucaltsche Pendel-+&nbsp;<br/>"));
   }

   /** ************* */
}
