// This class was generated by MaxQ (maxq.tigris.org)
// imports
package org.dbforms.bookstore;

import com.bitmechanic.maxq.HttpTestCase;
import java.util.*;
import HTTPClient.NVPair;

import org.dbforms.util.MessageResourcesInternal;
import org.dbforms.util.MessageResources;

// definition of test class
public class testUnboundedField extends HttpTestCase {
   private static String nodata = null;       

   public testUnboundedField(String name) {
      super(name);
      if (nodata == null) {
         MessageResources.setSubClass("resources");
         nodata = MessageResourcesInternal.getMessage("dbforms.nodata", Locale.getDefault());
      }
   }

   public void setUp() {
      //add setup code here if needed 
   }

   public void tearDown() {
      //add teardown code here if needed 
   }

   // Test method generated from the MaxQ Java generator
   public void testUnbounded() throws Exception {
      List list;

      get("http://localhost/bookstore/tests/testUnboundedField.jsp");
      System.out.println("Response code: " + getResponse().getStatusCode());
      assertEquals("Assert number 1 failed", 200, getResponse().getStatusCode());
      printResponse();
      assertTrue(responseContains("name=\"UNBOUNDED\" value=\"" + nodata + "\""));
      assertTrue(responseContains("name=\"f_0_0@root_1\" value=\"Eco, Umberto\""));


      list = new ArrayList();
      list.add(new NVPair("invtable", "0"));
      list.add(new NVPair("invname_0", ""));
      list.add(new NVPair("autoupdate_0", "false"));
      list.add(new NVPair("fu_0", "/tests/testUnboundedField.jsp"));
      list.add(new NVPair("lang", "de"));
      list.add(new NVPair("source", "/bookstore/tests/testUnboundedField.jsp"));
      list.add(new NVPair("customEvent", ""));
      list.add(new NVPair("firstpos_0", "0%3A1%3A1"));
      list.add(new NVPair("lastpos_0", "0%3A1%3A1"));
      list.add(new NVPair("f_0_0@root_1", "Eco, Umberto"));
      list.add(new NVPair("of_0_0@root_1", "Eco, Umberto"));
      list.add(new NVPair("f_0_0@root_2", "organisation 11"));
      list.add(new NVPair("of_0_0@root_2", "organisation 11"));
      list.add(new NVPair("UNBOUNDED", "[NULL]"));
      list.add(new NVPair("oUNBOUNDED", "[NULL]"));
      list.add(new NVPair("ac_next_0_46", ">  Next"));
      list.add(new NVPair("k_0_0@root", "0%3A1%3A1"));
      System.out.println(
         "Testing URL: "
            + replaceURL("http://localhost/bookstore/servlet/control?invtable=0&invname_0=&autoupdate_0=false&fu_0=/tests/testUnboundedField.jsp&lang=de&source=/bookstore/tests/testUnboundedField.jsp&customEvent=&firstpos_0=0%3A1%3A1&lastpos_0=0%3A1%3A1&f_0_0@root_1=Eco, Umberto&of_0_0@root_1=Eco, Umberto&f_0_0@root_2=organisation 11&of_0_0@root_2=organisation 11&UNBOUNDED=[NULL]&oUNBOUNDED=[NULL]&ac_next_0_46=>  Next&k_0_0@root=0%3A1%3A1"));
      post("http://localhost/bookstore/servlet/control", list);
      System.out.println("Response code: " + getResponse().getStatusCode());
      assertEquals("Assert number 2 failed", 200, getResponse().getStatusCode());
      printResponse();
      assertTrue(responseContains("name=\"UNBOUNDED\" value=\"" + nodata + "\""));
      assertTrue(responseContains("name=\"f_0_0@root_1\" value=\"Douglas, Adam\""));
      
      list = new ArrayList();
      list.add(new NVPair("invtable", "0"));
      list.add(new NVPair("invname_0", ""));
      list.add(new NVPair("autoupdate_0", "false"));
      list.add(new NVPair("fu_0", "/tests/testUnboundedField.jsp"));
      list.add(new NVPair("lang", "de"));
      list.add(new NVPair("source", "/bookstore/tests/testUnboundedField.jsp"));
      list.add(new NVPair("customEvent", ""));
      list.add(new NVPair("firstpos_0", "0%3A1%3A2"));
      list.add(new NVPair("lastpos_0", "0%3A1%3A2"));
      list.add(new NVPair("f_0_0@root_1", "Douglas, Adam"));
      list.add(new NVPair("of_0_0@root_1", "Douglas, Adam"));
      list.add(new NVPair("f_0_0@root_2", "organisation 2"));
      list.add(new NVPair("of_0_0@root_2", "organisation 2"));
      list.add(new NVPair("UNBOUNDED", "[NULL]"));
      list.add(new NVPair("oUNBOUNDED", "[NULL]"));
      list.add(new NVPair("ac_next_0_52", ">  Next"));
      list.add(new NVPair("k_0_0@root", "0%3A1%3A2"));
      System.out.println(
         "Testing URL: "
            + replaceURL("http://localhost/bookstore/servlet/control?invtable=0&invname_0=&autoupdate_0=false&fu_0=/tests/testUnboundedField.jsp&lang=de&source=/bookstore/tests/testUnboundedField.jsp&customEvent=&firstpos_0=0%3A1%3A2&lastpos_0=0%3A1%3A2&f_0_0@root_1=Douglas, Adam&of_0_0@root_1=Douglas, Adam&f_0_0@root_2=organisation 2&of_0_0@root_2=organisation 2&UNBOUNDED=[NULL]&oUNBOUNDED=[NULL]&ac_next_0_52=>  Next&k_0_0@root=0%3A1%3A2"));
      post("http://localhost/bookstore/servlet/control", list);
      System.out.println("Response code: " + getResponse().getStatusCode());
      assertEquals("Assert number 3 failed", 200, getResponse().getStatusCode());
      printResponse();
      assertTrue(responseContains("name=\"UNBOUNDED\" value=\"" + nodata + "\""));
      assertTrue(responseContains("name=\"f_0_0@root_1\" value=\"Douglas, Adam\""));

   }

}
