<?xml version="1.0"?>

<!-- 
  This is the ant build file to create the DbFormsUsersGuide 


  SEE dbforms/usersguide_src/READ_ME.txt for more information on how to obtain and set 

      1) your DOCBOOK_HOME
      2) your FOP_HOME
    
      in order to create documentation for DbForms
  
    
      Note:
      I used Version fop-0.20.5rc2 and docbook-xsl-1.60.1, older versions may make some problems
      because some attributes seem to be renamed.  
   
  Modified by SAB.
-->

<!-- Set the base directory to the location of the xml files -->
<project name="UsersGuide" default="build-doc" basedir=".">

  <!-- environment vars -->
  <property environment="env"/>

  <!-- set the following values according to your path or environment(for FOP_HOME and DOCBOOK_HOME) -->
  
  <!-- docbook location: Everything taken relative to this for docbook stuff -->
  <property name="docbookHome.dir" value="${env.DOCBOOK_HOME}"/>

  <property name="fopHome.dir" value="${env.FOP_HOME}"/>
  <!-- end of properties that need to be set -->

  <property name="UsersGuide.dir" value="${basedir}/usersguide_src"/>
  <property name="cvs.workingdir" value="."/>
  <property name="dependend.dir"  value="${cvs.workingdir}/dependend"/>
  <property name="javasrc.dir"    value="${cvs.workingdir}/src"/>
  <property environment="env"/>
  <property name="etc.dir"        value="${cvs.workingdir}/etc"/>
  <property name="doc.dir"        value="${cvs.workingdir}/doc"/>
  <property name="htmldoc.dir"    value="${doc.dir}/html"/>
  <property name="devguidoc.dir"  value="${doc.dir}/devgui"/>
  <property name="taglibdoc.dir"  value="${doc.dir}/taglib"/>
  <property name="build.dir"      value="${UsersGuide.dir}/build"/>
  <property name="tools.dir"      value="${UsersGuide.dir}/docbook_tools"/>

  <!-- Main stylesheets -->
  <property name="sSheetHome.dir" value="${docbookHome.dir}"/>

  <!-- 
     -  Main Docbook stylesheet
     -  use "http://docbook.sourceforge.net/release/xsl/current/html/chunk.xsl" if not available locally
     -->
  <property name="main.stylesheet" value="${sSheetHome.dir}/html/chunk.xsl"/>

  <!-- 
     -  Stylesheet to use for fo processing 
     -  use "http://docbook.sourceforge.net/release/xsl/current/fo/docbook.xsl" if not available locally
     -->
  <property name="fo.stylesheet" value="${sSheetHome.dir}/fo/docbook.xsl"/>

  <!-- 
     -  Input properties:
     -  all files should be in this directory
     -->
  <property name="in.dir" value="${UsersGuide.dir}"/>

  <!-- input file for any docbook valid document -->
  <property name="main.infile" value="DbForms_UsersGuide.xml"/>

  <!-- Output Properties: Output directory -->
  <property name="out.dir" value="doc/UsersGuide"/>

  <!-- all files -->
  <!-- output file for layout styling -->
  <property name="fo.outfile" value="UsersGuide.fo"/>

  <!-- output file for layout styling -->
  <property name="autolayout.outfile" value="layout.xml"/>

  <!-- Post XSLT transform parameter. Leave as is for Saxon -->
  <property name="param.args.post" value="saxon.extensions=1"/>

  <!-- Use javac 1.3 -->
  <property name="build.compiler" value="modern"/>

  <!-- XSLT engine class -->
  <property name="xslt.processor.class" value="com.icl.saxon.StyleSheet"/>

  <!-- path for xslt processor. -->
  <path id="xslt.processor.classpath">
    <pathelement path="${tools.dir}/saxon/saxon.jar"/>

    <!-- Saxon jar -->
    <pathelement path="${tools.dir}/saxon/saxon651.jar"/>
    <!-- docbook extensions -->
  </path>

  <path id="xsl.stylesheets">
    <pathelement path="${tools.dir}/xsl/sheets.zip"/>
  </path>
  <path id="classpath">
    <fileset dir="${dependend.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>


  <!--
     - Initial directory creation and directory cleanup
     -->
  <target name="clearWorkspace">
    <delete dir="${build.dir}"/>
    <mkdir dir="${build.dir}"/>
  </target>

  <target name="cleanWorkspace">
    <delete dir="${build.dir}"/>
  </target>

  <target name="prepare" depends="clearWorkspace">
    <delete dir="${out.dir}"/>
    <mkdir dir="${out.dir}"/>
    <mkdir dir="${out.dir}/html"/>
    <mkdir dir="${out.dir}/pdf"/>
    <mkdir dir="${out.dir}/html/images/callouts"/>
    <mkdir dir="${out.dir}/html/images/figures"/>
  </target>


  <!-- 
     -  generate HTM reference documentation from taglib-docu using XSL transformation 
     -->
  <target name="generate_taglib_htmldocs">

    <!-- Generate  HTML reference documentation within doc/html from taglib-docu.xml -->
    <echo message="begin xsl translation to generate HTML documentation  "/>

    <delete file = "${taglibdoc.dir}/DbFormsTags.html"/>
    <style style = "${etc.dir}/tldoc2html.xsl" 
           in    = "${etc.dir}/taglib_docu.xml" 
           out   = "${taglibdoc.dir}/DbFormsTags.html"/>

    <delete file="${taglibdoc.dir}/DbFormsTags_TocSem.html"/>
    <style style = "${etc.dir}/tldoc2html_toc.xsl" 
           in    = "${etc.dir}/taglib_docu.xml" 
           out   = "${taglibdoc.dir}/DbFormsTags_TocSem.html"/>

    <delete file = "${taglibdoc.dir}/DbFormsTags_TocAlph.html"/>
    <style style = "${etc.dir}/tldoc2html_toc.xsl" 
           in    = "${etc.dir}/taglib_docu.xml" 
           out   = "${taglibdoc.dir}/DbFormsTags_TocAlph.html">
      <param name="sortTagsAlphabetically" expression="true"/>
    </style>
    <echo message="end of xsl translation "/>
  </target>


  <!-- 
     -  generate PDF reference documentation from taglib-docu using 
     -  XSL transformation and FOP 
     --> 
  <target name="generate_taglib_pdfdocs_check">

    <!-- fisrt, check if the FOP_HOME env var points to a directory -->
    <condition property="pdf.ok">
      <available file="${fopHome.dir}"/>
    </condition>
  </target>

  <!-- ... if not, display this error message -->
  <target name="generate_taglib_pdfdocs_msg" unless="pdf.ok" depends="generate_taglib_pdfdocs_check">
    <echo message="cannot build the PDF documentation. Please install FOP (http://xml.apache.org/fop) and set the FOP_HOME env var"/>
  </target>

  <!-- this is the real PDF task -->
  <target name="generate_taglib_pdfdocs" depends="generate_taglib_pdfdocs_msg" if="pdf.ok">

    <!--Generate PDF reference documentation from taglib-docu.xml (FOP_HOME must be set)" -->
    <echo message="begin xsl translation to generate xsl-fo   "/>
    <style style = "${etc.dir}/tldoc2xsl-fo.xsl" 
           in    = "${etc.dir}/taglib_docu.xml" 
           out   = "${etc.dir}/DbFormsTags.xsl-fo"/>
    <echo message="end of xsl translation "/>
    <echo message="starting generation of ${doc.dir}/taglib/DbFormsTags.pdf using Apache FOP (FOP_HOME must be set)"/>

    <path id="fopclasspath">
      <!-- set classpath according to FOP_HOME -->
      <fileset dir="${fopHome.dir}/lib/">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${fopHome.dir}/build/">
        <include name="*.jar"/>
      </fileset>
    </path>

    <java classname="org.apache.fop.apps.Fop" fork="true" jvm="${java.home}/bin/java">
      <arg line=" ${etc.dir}/DbFormsTags.xsl-fo ${doc.dir}/taglib/DbFormsTags.pdf"/>
      <classpath refid="fopclasspath"/>
    </java>
    <echo message="end of PDF generation, output file is ${doc.dir}/taglib/DbFormsTags.pdf"/>
  </target>


  <!--
     -  JAVADOC TARGET
     -
     -  Build the API javadoc documentation.
     -->
  <target name="javadoc">
    <javadoc packagenames = "org.dbforms.*" 
             sourcepath   = "${javasrc.dir}" 
             destdir      = "${doc.dir}/api" 
             author       = "true" 
             version      = "true" 
             use          = "true" 
             windowtitle  = "DbForms API" 
             doctitle     = "DbForms API" 
             bottom       = "DbForms API" 
             private      = "false">

      <classpath refid="classpath"/>

      <!-- external links to the javadocs api -->
      <link href="http://java.sun.com/j2se/1.3/docs/api/"/>
      <link href="http://java.sun.com/products/jdbc/jdbc20.stdext.javadoc/"/>
      <link href="http://java.sun.com/products/servlet/2.2/javadoc/"/>
      <link href="http://xml.apache.org/xerces2-j/javadocs/api/"/>
      <link href="http://xml.apache.org/xalan-j/apidocs/"/>
    </javadoc>
  </target>


  <!-- ================================================ -->
  <!-- Generate output (select as needed)               -->
  <!-- ================================================ -->
  <target name    = "build-doc" 
          depends = "javadoc, generate_taglib_htmldocs, generate_taglib_pdfdocs, prepare,create_HTML,create_PDF,run-j"/>


  <!-- ==================================================== -->
  <!-- Generic XSLT-processor call (main docbook transform) -->
  <!-- ==================================================== -->
  <target name="create_HTML">
    <java classname="${xslt.processor.class}" fork="yes" dir="${out.dir}\html" failonerror="true">
      <classpath refid="xslt.processor.classpath"/>
      <classpath refid="xsl.stylesheets"/>

      <!--${main.stylesheet}-->
      <arg line="-l"/>
      <arg line="${in.dir}/DbForms_UsersGuide.xml ${main.stylesheet} ${param.args.post} "/>
      <arg line="section.autolabel=1"/>
      <arg line="section.label.includes.component.label=1"/>
      <arg line="chunk.first.sections=1"/>
      <arg line="generate.section.toc.level=0"/>
      <arg line="toc.section.depth=1"/>
    </java>

    <copy todir="${out.dir}/html/images/callouts">
      <fileset dir="${in.dir}/images/callouts" includes="*.png"/>
    </copy>

    <copy todir="${out.dir}/html/images/figures">
      <fileset dir="${in.dir}/images/figures" includes="*.png"/>
    </copy>
  </target>


  <!-- ================================================ -->
  <!--(FOP docbook transform)                           -->
  <!-- ================================================ -->
  <target name="create_PDF" depends="clearWorkspace">
    <java classname="${xslt.processor.class}" fork="yes" dir="${in.dir}" failonerror="true">
      <classpath refid="xslt.processor.classpath"/>
      <arg line="-o ${build.dir}/${fo.outfile}"/>
      <arg line="-l"/>
      <arg line="${in.dir}/${main.infile} ${fo.stylesheet}"/>
      <arg line="fop.extensions=1"/>
      <arg line="section.label.includes.component.label=1"/>
      <arg line="section.autolabel=1"/>
      <arg line="callout.unicode=1"/>
      <arg line="callout.graphics=0"/>
    </java>

    <echo message="finished fo output file"/>
    <echo message="starting generation of ${out.dir}/DbFormsTags.pdf using Apache FOP (FOP_HOME must be set)"/>

    <path id="fopclasspath">
      <!-- set classpath according to FOP_HOME -->
      <fileset dir="${fopHome.dir}/lib/">
        <!-- 2) set here-->
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${fopHome.dir}/build/">
        <!-- 3) set here-->
        <include name="*.jar"/>
      </fileset>
    </path>

    <java classname="org.apache.fop.apps.Fop" fork="true" jvm="${java.home}/bin/java">
      <arg line="${build.dir}/${fo.outfile} ${out.dir}/pdf/DbForms_UsersGuide.pdf"/>
      <classpath refid="fopclasspath"/>
    </java>

    <echo message="end of PDF generation, output file is ${out.dir}/pdf/DbForms_UsersGuide.pdf"/>
    <antcall target="cleanWorkspace"/>
  </target>


  <!-- Fill these in if you want to view files post build -->
  <target name="run-j">
    <tstamp>
      <format property="TODAY_UK" pattern="d-MMM-yyyy" locale="en"/>
    </tstamp>
    <echo>View ${out.dir}/html/index.html output file.</echo>
    <echo>Completed at ${TODAY_UK}</echo>
  </target>

</project>
