<?xml version="1.0" encoding="UTF-8"?>
 
	<chapter>
		<title id="app_hooks">Application hook-ups
</title>
		<sect1>
			<title>Introduction
</title>
			<para>It would be neither possible nor useful to create a system which has a solution, for every problem or requirement which could appear during the development-process (and life-cycle) of a database application.
</para>
			<para>Because it is impossible to foresee all eventual use cases and user needs, an 'all-in-one' product would most likely restrict the application developer sooner or later.
</para>
			<para>In order to handle the all-to-familiar unknown, systems must offer a kind of programming facility or Application Programmer Interface. DbForms offers the following:
</para>
		</sect1>
		<sect1>
			<title>Interface DbEventInterceptor
</title>
			<para>DbForms provides the <computeroutput>DbEventInterceptor</computeroutput> interface, which is capable of intercepting database operations (before and after they are executed).
</para>
			<para>This interface provides the following methods
</para>
			<example>
				<title>Methods defined in interface DbEventInterceptor
</title>
				<programlisting>
    public int preInsert(HttpServletRequest request, Hashtable fieldValues,
       DbFormsConfig config, <emphasis role="bold">Connection</emphasis> con)
                throws ValidationException;
 

    public void postInsert(HttpServletRequest request, DbFormsConfig config, Connection con);
 

    public int <emphasis role="bold">preUpdate</emphasis>(HttpServletRequest request, 
       <emphasis role="bold">Hashtable</emphasis> fieldValues, <emphasis role="bold">DbFormsConfig</emphasis> config, <emphasis role="bold">Connection</emphasis> con)
		throws ValidationException;;
 

    public void postUpdate(HttpServletRequest request, DbFormsConfig config, Connection con);
 

    public int preDelete(HttpServletRequest request, 
       Hashtable fieldValues,DbFormsConfig config, <emphasis role="bold">Connection</emphasis> con)
                throws ValidationException;;
 

    public void postDelete(HttpServletRequest request, DbFormsConfig config, Connection con);

     
    public int preSelect(HttpServletRequest request, DbFormsConfig config, Connection con)
		throws ValidationException;;
 
    public void postSelect(HttpServletRequest request, DbFormsConfig config, Connection con);
 
		</programlisting>
			</example>
			<para>As the names indicate:</para>
                        
                        <itemizedlist mark="opencircle">
<listitem>
<para>
The preXxx() methods get called <emphasis role="bold">before</emphasis> the respective database operation is performed, and <emphasis role="bold">return a value</emphasis> indicating if the operation should be performed or not
<blockquote>
 <para>DbEventInterceptor.GRANT_OPERATION</para>
 <para>DbEventInterceptor.DENY_OPERATION</para>
</blockquote>
</para>
</listitem>
<listitem>
<para>
The postXxx() methods get called <emphasis role="bold">after</emphasis> the operation has finished, and <emphasis role="bold">do not return a value</emphasis>, as the operation has already completed.
</para>
</listitem>
 
</itemizedlist>
                        
                         
 
			 
				
	 
		</sect1>
		<sect1>
			<title>Class Diagram
</title>
			<para/>
			<para>
				<figure>
					<title>UML diagram of the DbEventInterceptor interface and some of its implementations
</title><mediaobject  id="UML_diagram_of_DbEventInterceptor_interface">  
  <imageobject  role="html">
    <imagedata  format="PNG"  fileref="images/figures/UML_diagram_of_DbEventInterceptor_interface.png"/>
  </imageobject>
  <imageobject  role="fo">
    <imagedata  format="PNG"  fileref="../images/figures/UML_diagram_of_DbEventInterceptor_interface.png"/>
  </imageobject>
</mediaobject>
					 
				</figure>
			</para>
			<para>As you can see, there exists an interface <computeroutput>DbEventInterceptor</computeroutput> as described above. Additionally there exists a built-in implementation class <computeroutput>DbEventInterceptorSupport</computeroutput> of this interface. This is a convenience class which allows the developer to override just the methods he/she is interested in. There is no other difference between these two entities.
</para>
		</sect1>
		<sect1>
			<title>Method parameters
</title>
			<para/>
			<para>
				<table>
					<title>Parameters available in methods of DbEventInterceptor</title>
 
					<tgroup cols="2">
						<tbody>
							<row>
								<entry>Parameter
</entry>
								<entry>Description</entry>
							</row>
							<row>
								<entry>Connection con</entry>
								<entry>a database connection
=&gt; this object makes it easy to "trigger" other functionality like database-logging, keep up special data constraints, execute a sub-query, etc.</entry>
							</row>
							<row>
								<entry>DbFormsConfig config
</entry>
								<entry>a config object
provides the  method DbFormsConfig.getServletContext() which gives access to other J2EE-resources which may be stored in application scope. This could be an entry point to any other application, including EJB-Apps, Struts-Apps, Messaging systems, etc.
</entry>
							</row>
							<row>
								<entry>HttpServletRequest request
</entry>
								<entry>an http-request object
gives access to various types of information, including the current users name and users groups/roles.
</entry>
							</row>
							<row>
								<entry>Hashtable fieldValues:
</entry>
								<entry>in the preInsert(), preUpdate() and preDelete()-methods:
hashtable which gives access to the fields contained in the current (selected) row.
As the example below will demonstrate:
(String) fieldValues.get("lastname");
will return the field value of the field lastName of the row DbForm's is about to insert, to update or to delete.
In preInsert() and preUpdate() any changes to this hashtable are automatically reflected in the database. This means that the expression:
fieldValues.put("lastname", smith);
will ensure that the value smith be stored in the lastname field in the database. (column lastname must exist!)
</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
			
		</sect1>
		<sect1>
			<title>Installing Interceptors
</title>
			<para>How do we tell DbForms <emphasis role="italic">when</emphasis> to invoke <emphasis role="italic">which</emphasis> Interface implementation?
</para>
			<para>This information is provided in the dbForms XML configuration file. Similar to the granted-privileges security-constraint, (described in the security chapter) the XML tag which defines an Interceptor has to be placed inside a &lt;table&gt; element.
</para>
			<example>
				<title>interceptor in dbforms-config.xml</title>
				<programlisting>
    &lt;table name="customer"&gt;
        &lt;field name="id" fieldType="int" isKey="true"/&gt; 
	&lt;field name="firstname" fieldType="char" /&gt; 
	&lt;field name="lastname" fieldType="char" /&gt; 
	&lt;field name="address" fieldType="char" /&gt; 
	&lt;field name="pcode" fieldType="char" /&gt; 
	&lt;field name="city" fieldType="char" /&gt; 
            
            &lt;interceptor className = "com.foo.bar.CustomerValidatonChecker"/&gt; 
		
            &lt;interceptor className = "com.foo.bar.TransactionLogger"/&gt;
             
    &lt;/table&gt; 
		</programlisting>
			</example>
			<para>The semantics of these declarations could be described as follows:
</para>
			<para>
				<emphasis role="italic">Invoke </emphasis>
				<computeroutput>com.foo.bar.CustomerValidatonChecker</computeroutput>
				<emphasis role="italic"> and </emphasis>
				<computeroutput>com.foo.bar.TransactionLogger</computeroutput>
				<emphasis role="italic">, if the user is about to read, insert, update or delete data from table </emphasis>
				<computeroutput>customer and call the appropriate methods on those objects</computeroutput>
				<emphasis role="italic"/>
			</para>
		</sect1>
		<sect1>
			<title>Example
</title>
			<para>In this example, we override 2 methods (preInsert and preUpdate) to do some basic validation checking.
</para>
<example><title>Validation checking in interceptor</title>
<screen>

    public class CheckCustomerData extends DbEventInterceptorSupport {

        private int checkCustomer(Hashtable fieldValues) // method invented by developer    
            throws ValidationException {

                String lastName = (String) fieldValues.get("lastname");

                String pCode = (String) fieldValues.get("pcode");
                
                String city = (String) fieldValues.get("city");
                
                // perform form-validation
                if (lastName == null || lastName.trim().length()==0 ||   
                    pCode == null || pCode.trim().length()==0 ||
                    city == null || city.trim().length()==0)  {

                        throw new ValidationException("Please fill out the form completely!"); } 
                
                else return GRANT_OPERATION;

            }


        public int preInsert(HttpServletRequest request, Hashtable fieldValues, 
          DbFormsConfig config, Connection con)
            throws ValidationException {

                return checkCustomer(fieldValues);
                
            }


        public int preUpdate(HttpServletRequest request, Hashtable fieldValues, 
          DbFormsConfig config, Connection con)
            throws ValidationException {

                return checkCustomer(fieldValues);
            }


    }

</screen>			
	</example>		<para>Remarks:
</para>
			<para>There is an Exception ValidationException which may be thrown to signal a message to the end-user. In fact, returning the integer constant <computeroutput>DENY_OPERATION</computeroutput> defined in <computeroutput>DbEventInterceptor</computeroutput> leads to similar results (but with an unspecific error message and no generic message)
</para>
			<para>It is now possible to accumulate error messages while validating a form in a dbForms interceptor class.  This is useful in situations where many fields are validated and you wish to return several errors instead of just the first occurrence. In the validation process, when an error occurs, simply instantiate a new exception object and store it into a vector.  Do not throw this exception!  Once the validation process has completed, throw an instance of the MultipleValidationException class and pass the vector as an argument to its constructor.  Note that this functionality is dependant on using the xmlError tag. (refer to the section: DbForms Custom Tag Library for more information on using the xmlError  tag)
</para>
			<example><title>accumlating error messages</title> 
			<screen>
    public int preUpdate(HttpServletRequest req, Hashtable fieldValues, DbformsConfig conf, 
      Connection con)
        throws ValidationException{
			
            Vector errors = new Vector();
            
             // Validate, if error		
            errors.add(new SQLException("English-001:param");
            
            
             // More validations, errors		
            errors.add(new SQLException("Franais-003:param,param");
			
			
            if(!errors.isEmpty) throw new MultipleValidationException(errors);
			
			
        }                    
                        
                        </screen></example>
			<para/>
		</sect1>
                   <sect1> <title>Changing Key Values in an Interceptor</title>
      
     <para>Although you could try and do it via a pluggableEvent, as it currently stands this can not be done.</para>
     
     <para>Apparently if a field is marked with isKey=&quot;true&quot; in the config file,
the preDelete and preUpdate methods disregard any changes to it.</para>
<para>Carlos Anjos pointed out:</para><para>I had a situation where I did some processing in the preDelete method
and then I wanted to allow the operation, but on a different row.
So I changed the values in the fieldValues hashtable, but still the
orginal row got deleted.</para>
<para>After banging my head for where in my code the error was, I finally
understood that dbforms was ignoring the change to that attribute.
A friend of mine went through dbforms deleteEvent code and confirmed
that.</para>
 </sect1>
	</chapter>
 
