<?xml version="1.0" encoding="UTF-8"?>
<!--
    Document   : compatibility.xml
    Created on : April 6, 2003, 11:04 PM
    Author     : javauser
    Description:
        Purpose of the document follows.
-->
<chapter>
  <title>Compatibility notes:</title>
  <sect1><title>1.1.3</title>
  <para>The 
    <computeroutput>format</computeroutput> attributes of tags 
    <computeroutput>queryData</computeroutput> and 
    <computeroutput>tableData</computeroutput> have different
sementics now that are not 100% backwards compatible to the 1.1.2 and earlier releases.
  </para>
  <para>See the 
    <ulink url="../../taglib/DbFormsTags_Frame.html">
      <citetitle>Tag Library </citetitle>
    </ulink> from more info.
  </para>
  <para>Also, the insert button on previously generated list_and_single.jsp pages
will not appear unless the attribute 
    <computeroutput>showAlways="true"</computeroutput> is added to the 

    <computeroutput>insertButtonTag</computeroutput>. Otherwise, it will only appear in insert mode such as through a NavNewEvent.
 
  </para>
  </sect1>
  <sect1> 
    <title>1.1.4pr1</title>
    <para>
      If you are upgrading from 1.1.3 or from 1.1.4dev (first dev release), you must make three changes to 
      <computeroutput>dbforms-config.xml</computeroutput></para>
      <para>These changes need to be made to the 
        <computeroutput>&lt;servlet-class&gt;</computeroutput> element only and the  
        <computeroutput>&lt;servlet-name&gt; </computeroutput>can remain as it is in your 
        <computeroutput>dbforms-config.xml</computeroutput>
      </para>
      <orderedlist numeration="lowerroman">
        <listitem>
          <para>
            <screen>
  From:    
    <computeroutput>&lt;servlet-name&gt;config&lt;/servlet-name&gt;</computeroutput>
    <computeroutput>&lt;servlet-class&gt;org.dbforms.ConfigServlet&lt;/servlet-class&gt;</computeroutput>

  To:
    <computeroutput>&lt;servlet-name&gt;config&lt;/servlet-name&gt;</computeroutput>
    <computeroutput>&lt;servlet-class&gt;org.dbforms.servlets.ConfigServlet&lt;/servlet-class&gt;</computeroutput>
            </screen>
          </para>
        </listitem>
        <listitem>
          <para>
            <screen>
  From:
    <computeroutput>&lt;servlet-name&gt;control&lt;/servlet-name&gt;</computeroutput>
    <computeroutput>&lt;servlet-class&gt;org.dbforms.Controller&lt;/servlet-class&gt;</computeroutput>

  To:    
    <computeroutput>&lt;servlet-name&gt;control&lt;/servlet-name&gt;</computeroutput>
    <computeroutput>&lt;servlet-class&gt;org.dbforms.servlets.Controller&lt;/servlet-class&gt;</computeroutput>
            </screen>
          </para>
        </listitem>
        <listitem>
          <para>
            <screen>
  From:
    <computeroutput>&lt;servlet-name&gt;file&lt;/servlet-name&gt;</computeroutput>
    <computeroutput>&lt;servlet-class&gt;org.dbforms.util.FileServlet&lt;/servlet-class&gt;</computeroutput>
    
  To:
    <computeroutput>&lt;servlet-name&gt;file&lt;/servlet-name&gt;</computeroutput>
    <computeroutput>&lt;servlet-class&gt;org.dbforms.servlets.FileServlet&lt;/servlet-class&gt;</computeroutput>
            </screen>
          </para>
        </listitem>
      </orderedlist>
      <para>
        Not doing so will result in a error message:
        <screen>
  java.lang.ClassCastException
    at org.dbforms.taglib.DbFormTag.setPageContext(DbFormTag.java:1087)
    at org.apache.jsp.menu_jsp._jspService(menu_jsp.java:91)
    at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:137)...
         </screen>
      </para>
    
    <para>Similarly, to use JapsperReports please adjust the  <computeroutput>&lt;servlet-class&gt;</computeroutput> to be:
    <screen>
    &lt;servlet&gt;
        &lt;servlet-name&gt;startreport&lt;/servlet-name&gt;
        &lt;display-name&gt;startreport&lt;/display-name&gt;
        &lt;servlet-class&gt;org.dbforms.<emphasis role="bold">servlets.</emphasis>StartReportServlet&lt;/servlet-class&gt;
    &lt;/servlet&gt;
     </screen>
    </para>
   
  </sect1>
  <sect1> 
    <title>1.1.4pr2</title>
    <sect2><title>From all versions</title>
    <para>(also see note for 1.1.4pr1 above)  <emphasis role="italic">When upgrading from any previous release please note that:</emphasis>
    To have better control of the fields written to the datebase we changed the interceptor interface of the 
preUpdate/preInsert/preDelete events to: 
    <screen>
         public int preXXXXXX(HttpServletRequest request,  <emphasis role="bold">Table table</emphasis>, <emphasis role="bold">FieldValues</emphasis> fieldValues,
							  DbFormsConfig config, Connection con) throws ValidationException
    </screen>Now you have better control over the fields written to the datbase, you can remove, change and add fields.  Note however, that changes to fields marked marked with <computeroutput>isKey="true"</computeroutput> in the dbforms-config.xml file,
are still disregarded by the preDelete and preUpdate methods</para>

    <para>In many cases, you only need to change the interfaces in your old interceptor code because the 
           interface of the FieldValues class is nearly the same as the previously used Hashtable.  </para>
           <para><emphasis role="bold">However, to retrieve values from <computeroutput>FieldValues fieldValues</computeroutput> you will need to change your interceptors in one of two ways.</emphasis>  For example to retrieve a String
 <screen>
    String kanji = (String) fieldValues.get("kanji");</screen>           
you now need to use:
 <orderedlist numeration="lowerroman">
    <listitem>
        <para>
            <screen>
     String kanji = (String) fieldValues.get("kanji").getFieldValueAsObject();</screen>
                       
This will parse the string and build an object of the required type. If the input field is String the it returns string.</para>

        
</listitem>
<listitem>
<para><screen>
    String kanji =fieldValues.get("kanji").getFieldValue();</screen>
This returns the string as it is written to the form. No further parsing as it returns a String.</para>
</listitem>
 
</orderedlist>
 
           </para>
           <para><emphasis role="italic">Please also note that fields can now be removed using <computeroutput>fieldValues.remove("yourNameOfTheField");</computeroutput> which was not previously possible</emphasis></para>
    
           </sect2>
           <sect2><title>From 1.1.4pr1</title>
           <para><emphasis role="italic"> If you are upgrading from 1.1.4pr1,</emphasis> please adjust the following for the <computeroutput>&lt;filterCondition&gt;</computeroutput> tag (used embedded within the new <computeroutput>&lt;filter&gt;</computeroutput> tag).
You must change your filter values for strings to not use the ''! This is now done automatically.</para>
    <para>So: 
    <screen>	name like '?' </screen>
must be changed to
    <screen>	name like ? </screen>
    </para>
    </sect2>
  </sect1>
  <sect1><title>2.0</title>
  <para>To upgrade to 2.0 please see the sections on 1.1.4pr1 and 1.1.4pr2 as they were the basis for this release</para>
</sect1>
   <sect1><title>2.3</title>
  <para>To upgrade from any previous versions, an adjustment needs to be made in the <computeroutput>dbforms-config.xml</computeroutput> file if you are using BLOB-fields stored in your database and wish to retain the original way of storing that data. To do that, set the optional attribute <computeroutput>"blobHandling"</computeroutput> to <computeroutput>"classic"</computeroutput>. Please see <link linkend='blob_def'>BLOB-fields</link> for details.</para>
       <para>
           <screen>
                <emphasis role="bold">&lt;dbforms-config&gt;</emphasis>
                &lt;table name="pets" <emphasis role="bold">blobHandling="classic"</emphasis>&gt;
           </screen>
       </para>
</sect1>

  </chapter>
