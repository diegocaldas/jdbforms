<?xml version="1.0" encoding="UTF-8"?>
 
	<chapter>
		<title>Connection Support
</title>
		<sect1>
			<title>ConnectionFactory
</title>
			<para>The ConnectionFactory class provides JDBC connection objects to the DbForms client (specifically, to the org.dbforms.util.DbConnection class).  It gives a common interface to retrieve connection objects, but defer the database interaction to specialized <emphasis role="italic">connectionProvider</emphasis> classes.
</para>
<para><computeroutput>dbconnection</computeroutput> configuration is still compatible with previous means such as:</para>
<screen>
&lt;!-- ==========Non-ConnectionFactory Connections================= --&gt;
	&lt;!--
	uncomment this for JNDI connections
	&lt;dbconnection
		name = &quot;jdbc/dbformstest&quot;
		isJndi = &quot;true&quot;
	/&gt;
	--&gt;

	&lt;dbconnection
		name   = &quot;jdbc:mysql://localhost/test&quot;
		isJndi = &quot;false&quot;
		conClass  = &quot;org.gjt.mm.mysql.Driver&quot;
		username = &quot;somename&quot;
		password  = &quot;somepass&quot;
	/&gt;
</screen> 
<para>The <computeroutput>connectionFactory </computeroutput>use is optional and must be enabled to work, so it will not be used if the new properties are not declared as shown above.</para>
			<sect2>
				<title>Included ConnectionProvider classes
</title>
				<para>The connectionFactory package provides three <emphasis role="italic">connectionProvider</emphasis> classes:
</para>
<itemizedlist mark="opencircle">
<listitem>
<para>
<emphasis role="bold">ProtomatterConnectionProvider</emphasis>
    <blockquote>
    <para>Provides connection objects using the Protomatter Connection Pool library</para>
    <para><emphasis role="bold">http://protomatter.sourceforge.net/</emphasis></para>
    <para>
    <computeroutput>class name: org.dbforms.conprovider.ProtomatterConnectionProvider</computeroutput>
    </para>
     
    </blockquote>
</para>
</listitem>
<listitem>
<para><emphasis role="bold">JakartaConnectionProvider</emphasis>
<blockquote>
    <para>Provides connection objects using the Jakarta commons-dbcp ConnectionPool library
</para>
    <para><emphasis role="bold">http://protomatter.sourceforge.net/</emphasis></para>
    <para>
    class name: <computeroutput>org.dbforms.conprovider.ProtomatterConnectionProvider</computeroutput>
    </para>
     
    </blockquote> 
</para>
</listitem>
<listitem>
<para><emphasis role="bold">SimpleConnectionProvider</emphasis>
 <blockquote>
     
    <para>Provides connection objects, but does not  use connection pool components.</para>
<para>class name: <computeroutput>org.dbforms.conprovider.SimpleConnectionProvider</computeroutput></para>
				 
     
    </blockquote>
</para>
</listitem>
</itemizedlist>
 
				
			</sect2>
			<sect2>
				<title>DbForms and ConnectionFactory configuration
</title>
				 
				<para>The examples below show how to configure the "dbconnection" xml element contained in the dbforms-config.xml file.
</para>
				<sect3>
					<title>ProtomatterConnectionProvider
</title>
<blockquote>
<screen>

&lt;!--
    -  uses the Protomatter ConnectionPool
    -
    -  see http://protomatter.sourceforge.net/ for further information
    --&gt;

&lt;dbconnection

    id                      = "protomatter"

    isJndi                  = "false"

    isPow2                  = "true"
    
    default                 = "true"

    connectionProviderClass = "org.dbforms.conprovider.ProtomatterConnectionProvider"

    connectionPoolURL       = "jdbc:protomatter:pool:postgresPool"

    conClass                = "org.postgresql.Driver"

    name                    = "jdbc:postgresql://localhost/myDatabase?charSet=ISO-8859-1"

    username                = "postgres"

    password                = ""

/&gt;
</screen>					
</blockquote>				</sect3>
				<sect3>
					<title>JakartaConnectionProvider
</title><blockquote>
<screen>

&lt;!-
    -  uses the Jakarta commons-dbcp ConnectionPool
    -
    -  see http://jakarta.apache.org/commons/index.html for further informations
    -
    -  Note: this provider does NOT use the connectionPoolURL attribute.
    --&gt;


&lt;dbconnection

    id                      = "jakarta-commons-dbcp"

    isJndi                  = "false"

    isPow2                  = "true"

    default                 = "false"

    connectionProviderClass = "org.dbforms.conprovider.JakartaConnectionProvider"

    connectionPoolURL       = ""

    conClass                = "org.postgresql.Driver"

    name                    = "jdbc:postgresql://localhost/myDatabase?charSet=ISO-8859-1"

    username                = "postgres"

    password                = ""

/&gt;

</screen></blockquote>			</sect3>
				<sect3><title>SimpleConnectionProvider
</title><blockquote>
<screen>                                 

&lt;!-
    -  DOES NOT use connection pooling !!!
    -
    -  Note: this provider does NOT use the connectionPoolURL attribute.
    --&gt;

&lt;dbconnection

    id                      = "simple"

    isJndi                  = "false"

    isPow2                  = "true"

    connectionProviderClass = "org.dbforms.conprovider.SimpleConnectionProvider"

    connectionPoolURL       = ""

    conClass                = "org.postgresql.Driver"

    name                    = "jdbc:postgresql://localhost/myDatabase?charSet=ISO-8859-1"

    username                = "postgres"

    password                = ""

/&gt;

</screen></blockquote>
</sect3>
</sect2>
<sect2>					 
						<title>configuration parameters</title>
 
					<para>
						<informaltable>
							
							<tgroup cols="2">
								<tbody>
									<row>
										<entry>id</entry>
										<entry>string identifier for the dbconnection element. Gives the dbconnection an alpha-numeric name. Otherwise it is referred to by the order it was configured with the first 'dbconnection' starting at zero.</entry>
									</row>
									<row>
										<entry>default</entry>
										<entry>boolean value, specify that the current 'dbconnection'element specifies the default connection. The default connection is used by all the data access tags that don't specify a 'dbConnectionName' attribute value.</entry>
									</row>
									<row>
										<entry>isJndi</entry>
										<entry>boolean value, specify that the connection objects are retrieved using a JNDI service.</entry>
									</row>
									<row>
										<entry>isPow2</entry>
										<entry>boolean value, specify that the connectionFactory class will be used to objain jdbc connection objects [better to use useConnectionFactory, don't you think so ?].</entry>
									</row>
									<row>
										<entry>connectionProviderClass </entry>
										<entry>the full qualified class name of the connectionProvider class.</entry>
									</row>
									<row>
										<entry>connectionPoolURL</entry>
										<entry>the connection pool url string.
Used by ProtomatterConnectionProvider class.</entry>
									</row>
									<row>
										<entry>conClass</entry>
										<entry>the JDBC driver connection class string</entry>
									</row>
									<row>
										<entry>name</entry>
										<entry>the JDBC URL string</entry>
									</row>
									<row>
										<entry>username</entry>
										<entry>database user name value</entry>
									</row>
									<row>
										<entry>password</entry>
										<entry>database password value</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
					</para></sect2>
                                        <sect2>
					<title>Setting JDBC Properties
</title>
					<para>To set jdbc properties in jdbc drivers that can't specify properties using the JDBC url, you can nest property tags inside the dbconnection tag:</para>
 
<blockquote>
<screen>
    &lt;dbconnection&gt; 
            &lt;property name="charSet" value="8859_1" /&gt; 
    &lt;/dbconnection&gt; 
</screen>
</blockquote>
					
		 
					 
					<para>This properties will result in a DriverManager.getConnection(url, properties) call. It is not necessary to include the username and the password in the property list, this will be handled by the connection class.
</para>
					<para>Currently properties are supported for native connections (isJNDI=false, isPow2=false) and for connection with the Connection factory (isPow2=true).<emphasis role="bold">Example:</emphasis>
</para> 

<blockquote><screen>
&lt;dbconnection
    id                      = "simple"
    isPow2                  = "true"
    connectionProviderClass = "org.dbforms.conprovider.SimpleConnectionProvider"
    connectionPoolURL       = ""
    name                    = "jdbc:mysql://localhost/test"
    isJndi                  = "false"
    conClass                = "org.gjt.mm.mysql.Driver"
    username                = "secret"
    password                = "howdidyoufindout"&gt;

        <emphasis role="bold">&lt;property</emphasis> name="useUnicode" value="true" /&gt;

        <emphasis role="bold">&lt;property</emphasis> name="characterEncoding" value="Shift_JIS" /&gt;

&lt;/dbconnection&gt;
</screen></blockquote>					
				
			</sect2>
		</sect1>
		<sect1>
			<title>Connection pool properties
</title>
			<para/>
			<para>Every connectionProvider class that uses a connection pool facility can manage its own connection pool properties.
</para>
			<para>The dbconnection element can configure those properties using "pool-property" child elements.
</para>
			<sect2>
				<title>Protomatter ConnectionProvider supported properties
</title>
				<para/>
				<para>Protomatter ConnectionProvider class uses the following properties to configure its connection pool:
</para>
				<para>
					<emphasis role="bold">pool.initialSize</emphasis>:
</para><blockquote>
				<para>The initial pool size (default is 0).
</para></blockquote>
				<para>
					<emphasis role="bold">pool.maxSize</emphasis>:
</para><blockquote>
				<para>The max pool size (default is -1). If the max pool size is -1, the pool grows infinitely.
</para></blockquote>
				<para>
					<emphasis role="bold">pool.growBlock</emphasis>:
</para><blockquote>
				<para>The grow size (default is 1). When a new object is needed, this many are created.
</para></blockquote>
				<para>
					<emphasis role="bold">pool.createWaitTime</emphasis>:
</para><blockquote>
				<para>The time (in ms) to sleep between pool object creates (default is 0).
</para>
				<para>This is useful for database connection pools where it's possible to overload the database by trying to make too many connections too quickly.
</para></blockquote>
				<para>
					<emphasis role="bold">jdbc.validityCheckStatement</emphasis>:
</para><blockquote>
				<para>A SQL statement that is guaranteed to return at least 1 row. For Oracle, this is "select 1 from dual" and for Sybase it is "select 1".
</para>
				<para>This statement is used as a means of checking that a connection is indeed working.
</para></blockquote>
				<para>
					<emphasis role="bold">pool.maxConnectionIdleTime</emphasis>:
</para><blockquote>
				<para>If this property is present, and the pool.maidThreadCheckInterval property is also present, then a thread will be created that looks for connections that have been idle for more than pool.maxConnectionIdleTime seconds. When this thread finds them, it closed the connection and logs a warning with a stack trace of when the connection was checked out of the pool.
</para>
				<para>This is primarily here as a debugging aid for finding places where connections are not getting close, and should not be used in a production environment.
</para></blockquote>
				<para>
					<emphasis role="bold">pool.maidThreadCheckInterval</emphasis>:
</para><blockquote>
				<para>This is the number of seconds between attempts by the maid thread (if present) to find idle connections.
</para></blockquote>
			<para/>	 <para>For further details:
http://protomatter.sourceforge.net/1.1.8-pre5/javadoc/com/protomatter/jdbc/pool/JdbcConnectionPool.html
 </para>
		

			</sect2>
			<sect2>
				<title>Protomatter ConnectionProvider configuration example
</title>
<blockquote>
<screen>
    &lt;dbconnection
        id                      = "protomatter"
        isJndi                  = "false"
        isPow2                   = "true"
        defaultConnection       = "true"
        connectionProviderClass = "org.dbforms.conprovider.ProtomatterConnectionProvider"
        connectionPoolURL       = "jdbc:protomatter:pool:postgresPool"
        conClass                = "org.postgresql.Driver"
        name                    = "jdbc:postgresql://myHost/myDb"
        username                = "postgres"
        password                = ""&gt;
        &lt;!-- jdbc properties --&gt;
            &lt;property name="charSet" value="ISO-8859-1" /&gt;

        &lt;!-- Connection pool dataSource properties --&gt;
            &lt;pool-property name="pool.initialSize"             value="4"   /&gt;
            &lt;pool-property name="pool.maxSize"                 value="10"  /&gt;
            &lt;pool-property name="pool.growBlock"               value="2"   /&gt;
            &lt;pool-property name="pool.createWaitTime"          value="100" /&gt;
            &lt;pool-property name="pool.maxConnectionIdleTime"   value=""    /&gt;
            &lt;pool-property name="pool.maidThreadCheckInterval" value=""    /&gt;
            &lt;pool-property name="jdbc.validityCheckStatement"  value=""    /&gt;
    &lt;/dbconnection&gt;
</screen>	</blockquote>			
			</sect2>
			<sect2>
				<title>Jakarta ConnectionProvider supported properties
</title>
				<para/>
				<para>Jakarta ConnectionProvider class uses the following properties to configure its connection pool:
</para>
				<para>
					<emphasis role="bold">validationQuery</emphasis>:
</para><blockquote>
				<para>The SQL query that will be used to validate connections from this pool before returning them to the caller. If specified, this query MUST be an SQL SELECT statement that returns at least one row.
</para></blockquote>
				<para>
					<emphasis role="bold">maxActive</emphasis>:
</para><blockquote>
				<para>The maximum number of active connections that can be allocated from this pool at the same time, or zero for no limit.
</para></blockquote>
				<para>
					<emphasis role="bold">maxIdle</emphasis>:
</para><blockquote>
				<para>The maximum number of active connections that can remain idle in the pool, without extra ones being released, or zero for no limit.
</para></blockquote>
				<para>
					<emphasis role="bold">maxWait</emphasis>:
</para><blockquote>
				<para>The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception, or -1 to wait indefinitely.
</para></blockquote>
				 <para/>
                                 <para>For further details:
http://jakarta.apache.org/commons/dbcp/api/org/apache/commons/dbcp/BasicDataSource.html
 
		 </para>
				
				<para>
					<emphasis role="bold">useLog</emphasis>: "true" | "false"
</para><blockquote>
				<para>if "true", force the dataSource to log its statements using log4j.
</para><para>
					<emphasis role="italic">Note: Developer added this one to activate the dataSource log.</emphasis>
				</para></blockquote>
			</sect2>
			<sect2>
				<title>Jakarta ConnectionProvider configuration example
</title>
<blockquote>
<screen>
    &lt;dbconnection
        id                      = "jakarta-commons-dbcp"
        isJndi                  = "false"
        isPow2                  = "true"
        default                 = "false"
        connectionProviderClass = "org.dbforms.conprovider.JakartaConnectionProvider"
        connectionPoolURL       = ""
        conClass                = "org.postgresql.Driver"
        name                    = "jdbc:postgresql://localhost/myDatabase"
        username                = "postgres"
        password                = ""&gt;

            &lt;!-- jdbc properties --&gt;
                &lt;property name="charSet" value="ISO-8859-1" /&gt;
                
            &lt;!-- connection pool dataSource properties --&gt;
                &lt;pool-property name="validationQuery" value=""     /&gt;
                &lt;pool-property name="maxActive"       value="10"   /&gt;
                &lt;pool-property name="maxIdle"         value="5"    /&gt;
                &lt;pool-property name="maxWait"         value="-1"   /&gt;
                &lt;pool-property name="useLog"          value="true" /&gt;
    &lt;/dbconnection&gt;
</screen></blockquote>
			</sect2>
		</sect1>
		<sect1>
			<title>The ConnectionProvider class
</title>
			<para>A specialized <emphasis role="italic">connectionProvider</emphasis> class is a common class that extends the <emphasis role="italic">ConnectionProvider</emphasis> abstract class and provides the implementation of the following abstract methods:
</para>
			<para><itemizedlist mark="opencircle">
<listitem>
<para>
 <computeroutput>protected abstract void init() throws Exception;</computeroutput>
</para>			 
</listitem>
<listitem>
<para>
 <computeroutput>protected abstract Connection getConnection() throws SQLException;</computeroutput>
</para>
</listitem>

</itemizedlist>
			 
			</para>
			<para>A connectionProvider can implement the code to interact with a connection pool system.
</para>
			<sect2>
				<title>The init method
</title>
				<para>The <emphasis role="italic">init</emphasis> method should be used to initialize the chosen data source object or the connection pool component.
</para>
				<para>Examples:
</para><itemizedlist mark="opencircle">
<listitem>
<para>loading a specified DriverManager class
</para>
</listitem>
<listitem>
<para>initialize a java DataSource object
</para>
</listitem>
<listitem>
<para>initialize a connection pool object
</para>
</listitem>
</itemizedlist>
				
			<para/>	
				
				<para>Here's what the JakartaConnectionProvider class does:
</para>
<blockquote>
<screen>

  /**
   *  Initialize the Jakarta Commons connection pool.
   *
   * @throws Exception if any error occurs
   */

  protected void init() throws Exception {
  
    dataSource = new BasicDataSource();
    
    dataSource.setDriverClassName(prefs.getJdbcDriver());

    dataSource.setUrl(prefs.getJdbcURL());

    dataSource.setUsername(prefs.getUser());

    dataSource.setPassword(prefs.getPassword());

    dataSource.setValidationQuery(null);

    dataSource.setMaxActive(20);

    dataSource.setMaxIdle(5);

    dataSource.setMaxWait(-1);

  }
</screen>	</blockquote>		
			</sect2>
			<sect2>
				<title>The getConnection method
</title>
				<para>Simply, it must return an initialized Connection object.
</para>
				<para>Example of  the JakartaConnectionProvider class:
</para>
<blockquote>
<screen>
    /**
    *  Get a JDBC Connection
    *
    * @return  a JDBC Connection
    *
    * @exception  SQLException Description of the Exception
    */
 
        protected Connection getConnection() throws SQLException {
  
            return dataSource.getConnection();
        
        }
</screen></blockquote>				
			</sect2>
		</sect1>
		<sect1>
			<title>How To code your own connection provider class
</title>
			<para>To create your own connection provider class, follow these steps:
</para>
<orderedlist numeration="lowerroman">
<listitem>
<para>create a new class that extends "<computeroutput>org.dbforms.conprovider</computeroutput>.ConnectionProvider" class:
<blockquote>
<screen>
public class MyOwnConnectionProvider extends ConnectionProvider	{
			...

			}
</screen>
</blockquote>
</para>
</listitem>
<listitem>
<para>create a default constructor like this one:
<blockquote><screen>
    /**
    *  Default constructor.
    *
    * @throws Exception because of the &lt;code&gt;throws Exception&lt;/code&gt; clause
    *                   of the  &lt;code&gt;init&lt;/code&gt; method.
    */


        public MyConnectionProvider() throws Exception {
   
             super();    // up to now, do nothing...

        }
</screen>
</blockquote>
</para>
</listitem>
<listitem>
<para>implement the following ConnectionProvider abstract methods:
<itemizedlist mark="opencircle">
<listitem>
<para>
 <computeroutput>protected abstract void init() throws Exception;</computeroutput>
</para>
</listitem>
<listitem>
<para>
 <computeroutput>  protected abstract Connection getConnection() throws SQLException;</computeroutput>
</para>
</listitem>
 
</itemizedlist>
</para>
</listitem>
 
</orderedlist>
			 
			 
			<sect2>
				<title>Using pool-property elements to configure the JDBC connection pool attributes
</title>
				<para>A connectionProvider class can configure its connection pool attributes sing the values specificed by the pool-property xml elements, children of the dbconnection element of the dbforms-config.xml file.
</para>
				<para>Here's an example of the configuration of the dbconnection element that uses the ProtomatterConnectionProvider class to obtain JDBC connections from the database:
</para>
<blockquote>
<screen>
&lt;dbconnection

   id                      = "protomatter"

   isJndi                  = "false"

   isPow2                  = "true"

   defaultConnection       = "true"

   connectionProviderClass = "org.dbforms.conprovider.ProtomatterConnectionProvider"

   connectionPoolURL       = "jdbc:protomatter:pool:postgresPool"

   conClass                = "org.postgresql.Driver"

   name                    = "jdbc:postgresql://myHost/myDb"

   username                = "secret"

   password                = "moreSecret"&gt;
        &lt;!-- jdbc properties --&gt;
            &lt;property name="charSet" value="ISO-8859-1" /&gt;
        &lt;!-- Connection pool dataSource properties --&gt;
            &lt;pool-property name="pool.initialSize"             value="4"   /&gt;
            &lt;pool-property name="pool.maxSize"                 value="10"  /&gt;
            &lt;pool-property name="pool.growBlock"               value="2"   /&gt;
            &lt;pool-property name="pool.createWaitTime"          value="100" /&gt;
            &lt;pool-property name="pool.maxConnectionIdleTime"   value=""    /&gt;
            &lt;pool-property name="pool.maidThreadCheckInterval" value=""    /&gt;
            &lt;pool-property name="jdbc.validityCheckStatement"  value=""    /&gt;
&lt;/dbconnection&gt;
</screen></blockquote>
				
				<para>When a ConnectionProvider class is instantiated, it can access to the connection pool properties using the following statement:
</para><blockquote>
<screen>
Properties props = prefs.getPoolProperties();
</screen></blockquote>
<para>
The "name" attribute of the pool-property xml element becomes the property key that must be used to retrieve the property value from the above Properties class.
</para><para>
Every connection pool package uses its own configuration system; here's the example code used to configure the <emphasis role="italic">ProtomatterConnectionProvider</emphasis> class:
</para>
<blockquote>
<screen>
    Properties props = null;
        ...

    // now set the connection pool custom properties;
    
    // if the connectionPool properties object is null,
    // instance a new properties object anyway, to use default values;

        if ((props = prefs.getPoolProperties()) == null)
            props = new Properties();

    // use defaults values as specified into the documentation;

        setIntegerArg(args, props, CP_PROPS_INITIALSIZE,             "0");

        setIntegerArg(args, props, CP_PROPS_MAXSIZE,                 "-1");

        setIntegerArg(args, props, CP_PROPS_GROWBLOCK,               "1");

        setIntegerArg(args, props, CP_PROPS_CREATEWAITTIME,          "0");

        setArg       (args, props, CP_PROPS_VALIDITYCHECKSTATEMENT,  null);

        setIntegerArg(args, props, CP_PROPS_MAXCONNECTIONIDLETIME,   null);

        setIntegerArg(args, props, CP_PROPS_MAIDTHREADCHECKINTERVAL, null);

    // finally create the pool and we're ready to go!

        Class.forName(CP_DRIVER).newInstance();

        connectionPool = new JdbcConnectionPool(getLastToken(prefs.getConnectionPoolURL(), ":"), args);

</screen></blockquote>
				<para/>
				<para>and here's the (simpler) code for J<emphasis role="italic">akartaConnectionProvider</emphasis> class:
</para>
<blockquote>
<screen>
    Properties props = null;
        ...

    // now set the connection pool custom properties;

    // if the connectionPool properties object is null,
    // instance a new properties object anyway, to use default values;

        if ((props = prefs.getPoolProperties()) == null)
            props = new Properties();

        String validationQuery = props.getProperty(CP_PROPS_VALIDATION_QUERY, null);

        if (!Util.isNull(validationQuery))
            dataSource.setValidationQuery(validationQuery.trim());

        dataSource.setMaxActive (Integer.parseInt(props.getProperty(CP_PROPS_MAX_ACTIVE, "20")));

        dataSource.setMaxIdle   (Integer.parseInt(props.getProperty(CP_PROPS_MAX_IDLE,   "5")));

        dataSource.setMaxWait   (Long.parseLong  (props.getProperty(CP_PROPS_MAX_WAIT,   "-1")));

    // if PROPS_LOG == true, use log4j category to log the datasource info;

        String useLog = props.getProperty(CP_PROPS_USE_LOG, "false");

            if (!Util.isNull(useLog)  "true".equals(useLog.trim()))
                {
                cat.info("::init - dataSource log activated");
                dataSource.setLogWriter(new Log4jPrintWriter(cat, cat.getPriority()));
                }
</screen>				
</blockquote>
				<para/>
			</sect2>
		</sect1>
	</chapter>
 
