<?xml version="1.0" encoding="UTF-8"?>

<chapter>
  <title>Class diagrams</title>

  <sect1>
    <title>DAO package</title>
    <para>
      The DAO (data access object) package provides the DataSource* classes
      that manage the database operations (insert, update, delete).
    </para>
    <para>
      Click here for the <ulink url="./images/figures/uml/class/dao.ucd.png">diagram</ulink> picture.
    </para>
    <sect2>
      <title>DataSourceList</title>
      <para> 
        DataSourceList holds a list of DataSourceFactory objects in the session context.
        It's needed by the navigation events to store the datasource by a per session mode.
        So it is possible to reuse the data between different calls 
        and it's not neccessary to refetch again.
      </para>
    </sect2>
    <sect2>
      <title>DataSourceFactory</title>
      <para>
        The DataSourceFactory class creates and holds internally a 
        DataSource object as dataHandler. 
        The dataSource object type is specified by the dataAccess class name 
        for the given table. 
      </para>
    </sect2>
    <sect2>
      <title>DataSource</title>
      <para>
        The DataSource abstract class provides the interface for the objects that do
        data access operations. Specialized subclasses must implement abstract methods
        for a given data source type (i.e.: JDBC data source, XML datasource and so on). 
      </para>
    </sect2>
    <sect2>
      <title>DataSourceJDBC</title>
      <para>
        Concrete DataSource class; uses JDBC to manage data form relational databases.
      </para>
    </sect2>
    <sect2>
      <title>DataSourceXML</title>
      <para>
        Concrete DataSource class; manages XML data.
      </para>
    </sect2>
    <sect2>
      <title>org.dbforms.util.ResultSetVector</title>
      <para>
        ResultSetVector class is an object wrapper for the data retrieved from a
        given data source.
      </para>
    </sect2>
  </sect1>

  <sect1>
    <title>Event package</title>
    <para>
      The Event package contains the EventEngine and the Event Factory classes.
      Provides the DbEventInterceptor interface and the DbEventInterceptorSupport class.
    </para>
    <para>
      Click here for the <ulink url="./images/figures/uml/class/event.ucd.png">diagram</ulink> picture.
    </para>
    <sect2>
      <title>EventEngine</title>
      <para> 
        This class is invoked by the Controller servlet. It parses a request to find out
        which Event(s) need to be instanciated.
        The fine-grained parsing (parsing of additional data, etc) is done
        by the WebEvent-Object itself (in order to hide complexity from this
        class and to keep the framework open for implementations of new Event-classes).
      </para>
    </sect2>
    <sect2>
      <title>EventFactory</title>
      <para> 
        The EventFactory abstract class provides the interface and the implementation
        of protected methods used by eventFactory subclasses (see NavEventFactory and DatabaseEventFactory) 
      </para>
    </sect2>
    <sect2>
      <title>NavEventFactory</title>
      <para> 
        The NavEventFactory abstract class provides the interface for a NavigationEvent 
        concrete class (see NavEventFactoryImpl).       
      </para>
    </sect2>
    <sect2>
      <title>NavEventFactoryImpl</title>
      <para> 
        The NavEventFactoryImpl class is the concrete implementation of the NavEventFactory abstract class;
        it initializes also the default navigation events.
      </para>
    </sect2>
    <sect2>
      <title>DatabaseEventFactory</title>
      <para> 
        The DatabaseEventFactory abstract class provides the interface for a DatabaseEvent 
        concrete class (see DatabaseEventFactoryImpl).
      </para>
    </sect2>
    <sect2>
      <title>DatabaseEventFactoryImpl</title>
      <para> 
        The DatabaseEventFactoryImpl class is the concrete implementation of the DatabaseEventFactory abstract class;
        it initializes also the default database events.
      </para>
    </sect2>
    <sect2>
      <title>NavigationEvent</title>
      <para> 
        The NavigationEvent abstract class provides the interface for NavigationEvent subclasses.
        See the Datalist diagram page [REF HERE] for further informations about
        NavigationEvent subclasses.
      </para>
    </sect2>
    <sect2>
      <title>ReloadEventt</title>
      <para>
        ReloadEvent is used to reload the current page with data from Request object.
        When you want to do action on different field when one of them change.
        Use for field manipulation server side.
      </para>
      <para>
        Example: Select child change when Select parent change.
      </para>
    </sect2>
    <sect2>
      <title>NoopEvent</title>
      <para>
      </para>
    </sect2>
  </sect1>

</chapter>
