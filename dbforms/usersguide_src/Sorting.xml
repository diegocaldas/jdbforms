<?xml version="1.0" encoding="UTF-8" ?>

<chapter>
		<title>Sorting, Filtering, Searching, and Query Support 
</title>
		<sect1>
			<title>Sorting
</title>
			<para>Sorting is an important, even essential, issue for many database applications. For example, look at the application shown in Figure 19 - it is an enhanced version of the service-JSP taken from the sample application (demonstrated in an earlier chapter)
</para>
			<para/>
			<para>
				<figure>
					<title>DbForms built in sorting mechanism in action
</title>

<mediaobject  id="sorting_mechanism">  
  <imageobject  role="html">
    <imagedata  format="PNG"  fileref="images/figures/sorting_mechanism.png"/>
  </imageobject>
  <imageobject  role="fo">
    <imagedata  format="PNG"  fileref="../images/figures/sorting_mechanism.png"/>
  </imageobject>
</mediaobject> 
				</figure>
			</para>
			<para>The user is able to define the sorting of the table by choosing a value Ascending, Descending or None from the sorting-select-boxes below <emphasis role="bold">ID</emphasis> or below <emphasis role="bold">NAME</emphasis>
			</para>
			<para>If the user wants, for instance, the table to be ordered by <emphasis role="bold">NAME</emphasis> instead of <emphasis role="bold">ID</emphasis> then he/she has to select  ASCENDING or DESCENDING from the NAME drop-down select box.
</para>
		
		<sect2>
			<title>How to use DbForms sorting facility
</title>
			<para>The custom tag enabling this functionality is very easy to use:
</para>
			<example>
				<title>Instantiating a sort - tag
</title>
				<programlisting>
            &lt;db:sort fieldName="id" /&gt;</programlisting>
			</example>
			<para>Basically, this is all you need to write! This functionality even works within nested forms. But there is one important configuration issue you should be aware of: <emphasis role="bold">all non-key-fields</emphasis> you want to be sortable should be declared sortable in the XML-config file:
</para>
			<example>
				<title>Preparing tables for sorting: define sortable fields
</title>
				<programlisting>
                                
            &lt;table name="service"&gt;
                &lt;field name="id" fieldType="int" isKey="true"/&gt; 
		&lt;field name="name" fieldType="char" <emphasis role="bold">sortable="true"</emphasis>/&gt; 
		&lt;field name="description" fieldType="char" /&gt; 
            &lt;/table&gt; 
		</programlisting>
			</example>
			<para>The default sorting behavior is false. You should use <emphasis role="bold">sortable=true</emphasis> sparingly, especially fields with big field size should not be declared as sortable if it's not really necessary. The reason for this is the amount of data to be transferred for enabling sorting. The more sortable fields, the more data traffic!
</para>
		
<para>Please note: sorting is one of those issues which are still under development. The sorting-boxes described in this tag are already very powerful, but they are still only a beginning. A limitation of the current implementation is the melting of view and controller for the search widgets.
Future versions of DbForms may be expected to provide more on sorting.</para>


			<para/>
		</sect2>
                
                </sect1>
                <!--    END OF SORTING BEGINNING OF FILTERING -->
                
                
                
                <sect1>
			<title>Filtering
</title>
			<para>Just like sorting, filtering of data rows is an important, even essential, issue for many database applications.
</para>
		<para>Filtering a table-selection is the most typical case of filtering. In its simplest case, the Filter is nothing more than a part of the WHERE clause of the SQL SELECT statement used to retrieve the rows.
</para>
		<sect2>
			<title>Filtering rows to be selected
</title>
			
			<para>This kind of filtering is very easy applied in DbForms. The filter criteria may be passed in the filter attribute of  the dbform- root tag.
</para>
			<example>
				<title>An example for static filtering
</title>
				<programlisting>
    <emphasis role="bold">&lt;db:dbform</emphasis> tableName="employee" maxRows="*" followUp="/employees.jsp"
     autoUpdate="false" <emphasis role="bold">filter</emphasis>="deptno=101,salary&gt;=30000,name~Peter%"&gt;
      ...
 
    &lt;/db: dbform&gt; 
		</programlisting>
			</example>
			<para>The example above restricts the result set to employees of department 101 with salaries higher or equal 30000 and a name <emphasis role="italic">like</emphasis> Peter (i.e. Peter Berger, Peter Smith, ...)
</para>
			<para>The following is a list of the operators that are currently supported by the filter attribute:
</para>
			<para/>
			<table><title>filter operators</title>
				 
				<tgroup cols="3">
					<tbody>
						<row>
							<entry><emphasis role="bold">Operator</emphasis></entry>
							<entry><emphasis role="bold">Meaning</emphasis></entry>
							<entry><emphasis role="bold">Example</emphasis></entry>
						</row>
						<row>
							<entry>=</entry>
							<entry>Equals</entry>
							<entry>aField=value</entry>
						</row>
						<row>
							<entry>&lt;&gt;</entry>
							<entry>Not Equal</entry>
							<entry>aField&lt;&gt;value</entry>
						</row>
						<row>
							<entry>&lt;</entry>
							<entry>Smaller then</entry>
							<entry>aField&lt;100</entry>
						</row>
						<row>
							<entry>&gt;</entry>
							<entry>Greater then</entry>
							<entry>aField&gt;0</entry>
						</row>
						<row>
							<entry>&lt;=</entry>
							<entry>Smaller then or equal</entry>
							<entry>aField&lt;=100</entry>
						</row>
						<row>
							<entry>&gt;=</entry>
							<entry>Greater then or equal</entry>
							<entry>aField&gt;=0</entry>
						</row>
						<row>
							<entry>~</entry>
							<entry>Like</entry>
							<entry>aField~%P%</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<para/>
			<para>By default, filter elements are interpreted by dbforms and ANDed together to build a final where Clause.  In certain situations, a logical OR is required between individual elements.  This is achieved by using the pipe(|) symbol:
</para>
<blockquote>
			<para>aField&lt;10,aField=1,|aField=3
</para>
			<para>will render the following where Clause
</para>
			<para>WHERE aField&lt;10 AND aField=1 OR aField=3
</para>
			<para>Dynamic filtering is possible as well, as the filter-attribute gets dynamically evaluated by the jsp container.
</para></blockquote>
			<example>
				<title>Example for dynamic filtering
</title>
				<programlisting>
    &lt;%
    // scriptlet determines filter
 
    StringBuffer myFilter = new StringBuffer();
 
    myFilter.append("aField=");

    myFilter.append(request.getParameter("SomeVal"));
 
    %&gt; 
		
    <emphasis role="bold">&lt;db:dbform</emphasis> tableName="employee" maxRows="*" 
    followUp="/employees.jsp" autoUpdate="false" <emphasis role="bold">filter</emphasis>="&lt;%= myFilter.toString() %&gt;"<emphasis role="bold">&gt;</emphasis> 
    ...
 
    &lt;/db: dbform&gt; 
		</programlisting>
			</example>
		</sect2>
		<sect2>
			<title>Filtering (restricting) rows to be manipulated
</title>
			<para>There are many different reasons why filtering of data is needed. However, in many cases the filtering should not only be applied to data-selection, but also to data manipulating operations such as <emphasis role="italic">insert</emphasis>s, <emphasis role="italic">update</emphasis>s or <emphasis role="italic">delete</emphasis>s.
</para>
			<para>
				<emphasis role="bold">Scenario:</emphasis>
			</para>
			<para>For example, we want to define a filter to guarantee that certain users may only manipulate data belonging to certain departments:  User A may only edit data for employees of department 100 and 200.
</para>
			<para>The detailed constraints should be defined as follows:
</para><itemizedlist mark="opencircle">
<listitem>
<para>it is forbidden for the user to insert any new employees with a dept.no. other than 100 or 200.
</para>
</listitem>
<listitem>
<para>it is forbidden for the user to update employee data where the dept_no field has an  assigned value other then 100 or 200.
</para>
</listitem>
<listitem>
<para>it is forbidden for the user to delete employees where the dept_no field has a value other then 100 or 200.
</para>
</listitem>
</itemizedlist>
		<para>We could easily carry out these rules by applying the methods and patterns we learned in the previous chapters:
</para>	
	<itemizedlist mark="opencircle">
<listitem>
<para>set a filter attribute on the &lt;dbform&gt; element
</para>
</listitem>
<listitem>
<para>use a select box or radio buttons for the dept_no field =&gt; so that the user has to choose from a set of valid values and has no chance to enter invalid values.
</para>
</listitem>
</itemizedlist>		
			
			
			
			
			<para>In many cases, this would be sufficient, but to make things really secure and to prevent malicious users from emulating form request using telnet, etc. we need to define these rules in a more secure way.
</para>
			<para>This approach is described in the chapter on <link linkend='app_hooks'>Application Hookups</link>.
</para>
			<para/>
		</sect2>
                </sect1>
                
                
                <!-- END OF FILTERING BEGGING OF SEARCHING -->
                
               <sect1>
			<title>Searching
</title>
			<para>Searching is another must-have functionality for a database application framework like DbForms.
</para>
			<para>DbForms allows you to create search-forms very quickly. The number of fields to be searched, the kind of input widgets (text field, textArea, select box, etc.), the search (compare)  algorithms and the search criteria combinations are easily defined by the developer.
</para>
			<para>All you have to do is:
                        
</para>

<itemizedlist mark="opencircle">
<listitem>
<para>decide which fields you want to make searchable.
</para>
</listitem>
<listitem>
<para>decide if you want the user to choose the criteria-combination-mode or if you want to use a (hidden) default.
</para>
</listitem>
<listitem>
<para>decide if you want the user to choose the kind of search algorithm to be used or if you want to use a (hidden) default.
</para>		
</listitem>
<listitem>
<para>define a kind of search-button which will submit the search fields to the controller.
</para></listitem>
</itemizedlist>			
			<sect2>
                        <title>Search Criteria</title>
			<para>The fields holding search-criteria, search-criteria-combing-mode and search-algorithms <emphasis role="bold">must follow a special naming convention</emphasis> (in order to allow searching in nested forms, etc). This makes the whole thing look a bit complicated, but it really isnt, as you will see below.
 This naming convention is prepared for you in hashtable objects accessible as scripting variables. (refer to the chapter on <link linkend='scrip_var'>Scripting Variables</link>)
</para>
			<para/>
			<para>
				<table>
					<title>search naming system
					<tgroup cols="2">
						<tbody>
							<row>
								<entry><emphasis role="bold">Name of scripting variable Hashtable</emphasis></entry>
								<entry><emphasis role="bold">Description</emphasis></entry>
							</row>
							<row>
								<entry>searchFieldNames_tableName</entry>
								<entry>Contains the encoded names used for selecting the search criteria fields (firstname, lastname, etc.)
Example:
searchFieldNames_cust.get(&quot;firstname&quot;);</entry>
							</row>
							<row>
								<entry>searchFieldModeNames_tableName</entry>
								<entry>Contains the encoded names used for specifying the search modes (and, or) of each search criteria
Example:
searchFieldModeNames_cust.get(&quot;firstname&quot;)</entry>
							</row>
							<row>
								<entry>searchFieldAgorithmNames_tableName</entry>
								<entry>Contains the encoded names used for specifying the algorithm type (weak, sharp) of each search criteria
Example:
searchFieldAlgorithmNames_cust.get(&quot;firstname&quot;)</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
			 
		</sect2>
		<sect2>
			<title>Search Algorithms
</title>
			<para>The behaviour of searching is selected by different algorithm types:
</para>
			<para/>
			<para>
				<table>
					<title>search behavior selection
					<tgroup cols="2">
						<tbody>
							<row>
								<entry><emphasis role="bold">possible values of search field algorithm:</emphasis>
</entry>
								<entry><emphasis role="bold">Description  -
Searching is done with:</emphasis></entry>
							</row>
							<row>
								<entry>sharp</entry>
								<entry> =           this is the default behavior</entry>
							</row>
							<row>
								<entry>sharpLT</entry>
								<entry> &lt;</entry>
							</row>
							<row>
								<entry>sharpLE</entry>
								<entry> &lt;=</entry>
							</row>
							<row>
								<entry>sharpGT</entry>
								<entry> &gt;</entry>
							</row>
							<row>
								<entry>sharpGE</entry>
								<entry> &gt;=</entry>
							</row>
							<row>
								<entry>sharpNE</entry>
								<entry> &lt;&gt;</entry>
							</row>
							<row>
								<entry>sharpNULL</entry>
								<entry> is null</entry>
							</row>
							<row>
								<entry>sharpNOTNULL</entry>
								<entry> Not is null</entry>
							</row>
                                                               
                                                        <row> <entry>sharpExtended</entry>
                                                                <entry morerows='7' valign='middle'>In this mode the search value is parsed for special chars -- see list below. The default search operator is taken from the list above.</entry>
                                                        </row>
                                                        <row><entry>sharpLTExtended</entry>
                                                        </row>
                                                       
                                                        <row><entry>sharpLEExtended</entry>
                                                        </row>
                                                        <row><entry>sharpGTExtended</entry>
                                                        </row>
                                                        <row><entry>sharpGEExtended</entry>
                                                        </row>
                                                        <row><entry>sharpNEExtended</entry>
                                                        </row>
                                                        <row><entry>sharpNULLExtended</entry>
                                                        </row>
                                                        <row><entry>sharpNOTNULLExtended</entry>
                                                        </row>
						</tbody>
					</tgroup>
				</table>
			 </para>
			<para>List of special characters that are parsed for:
</para>
			<para>
				<table>
					<title>special characters in searches</title>
					<tgroup cols="2">
						<tbody>
							<row>
								<entry>weak</entry>
								<entry> like</entry>
							</row>
							<row>
								<entry>weakStart</entry>
								<entry> like,  % is added in front of value</entry>
							</row>
							<row>
								<entry>weakEnd</entry>
								<entry> like, % is appended to value</entry>
							</row>
							<row>
								<entry>weakStartEnd</entry>
								<entry> like, % is added in front of value and % is appended to value</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
                        <para/>
			<para>If extended mode is set, the values will be parsed for special chars at the beginning:
		 </para>
			<para>
				<table>
					<title>extended mode searches
					<tgroup cols="2">
						<tbody>
							<row>
								<entry>Special chars in search values
</entry>
								<entry>Description</entry>
							</row>
							<row>
								<entry>=</entry>
								<entry>Search operator is sharp</entry>
							</row>
							<row>
								<entry>&lt;&gt;</entry>
								<entry>Search operator is sharpNE</entry>
							</row>
							<row>
								<entry>!=</entry>
								<entry>Search operator is sharpNE</entry>
							</row>
							<row>
								<entry>&gt;=</entry>
								<entry>Search operator is sharpGE</entry>
							</row>
							<row>
								<entry>&gt;</entry>
								<entry>Search operator is sharpGT</entry>
							</row>
							<row>
								<entry>&lt;=</entry>
								<entry>Search operator is sharpLE</entry>
							</row>
							<row>
								<entry>&lt;</entry>
								<entry>Search operator is sharpLT</entry>
							</row>
							<row>
								<entry>[NULL]</entry>
								<entry>Search operator is sharpNULL</entry>
							</row>
							<row>
								<entry>[!NULL]</entry>
								<entry>Search operator is sharpNOTNULL</entry>
							</row>
							<row>
								<entry>value1-value2</entry>
								<entry>Results in fieldname &lt;= value1 and fieldname &gt;= value2</entry>
							</row>
							<row>
								<entry>value1-</entry>
								<entry>Results in fieldname &lt;= value1</entry>
							</row>
							<row>
								<entry>-value2</entry>
								<entry>Results in fieldname &gt;= value2</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
			
</sect2>
<sect2><title>Search Example</title><para>This is a fully functional search panel. It is included in the example application included in the DbForms distribution.
You may also test it on the running live samples at the DbForms Website.</para>
 
<mediaobject  id="dynamic_filtering">  
  <imageobject  role="html">
    <imagedata  format="PNG"  fileref="images/figures/dynamic_filtering.png"/>
  </imageobject>
  <imageobject  role="fo">
    <imagedata  format="PNG"  fileref="../images/figures/dynamic_filtering.png"/>
  </imageobject>
</mediaobject>
<para>This is the code responsible for creating the panel above. In the context of this example, the use of the hashtable should be clear.  As mentioned above, this mechanism may be applied on any other database fields, using any html widgets for data input.
</para>
<screen>
	&lt;table cellspacing="0" cellpadding="1" width="550"&gt; 
            &lt;tr bgcolor="#F7A629"&gt; 
		&lt;td bgcolor="#F7A629"&gt;&lt;b&gt;Search a customer&lt;/b&gt;&lt;/td&gt; 
		&lt;td colspan="2" bgcolor="#F7A629"&gt;nbsp;&lt;/td&gt; 
		&lt;td bgcolor="#F7A629"&gt;
                    &lt;input value="Search!" 
                              type="button" 
                              onClick="javascript:document.dbform.submit()"&gt;
                &lt;/td&gt; 
            &lt;/tr&gt; 
            &lt;tr bgcolor="#CCBBCC"&gt; 
		&lt;td&gt;Field&lt;/td&gt; 
		&lt;td&gt;Value&lt;/td&gt; 
		&lt;td&gt;Combining mode&lt;/td&gt; 
		&lt;td&gt;Search Algorithm&lt;/td&gt; 
            &lt;/tr&gt; 
            &lt;tr bgcolor="#BBCCBB"&gt; 
		&lt;td&gt;First name&lt;/td&gt; 
		&lt;td&gt;
                    &lt;input type="text"
                              name="&lt;%=searchFieldNames_customer.get("firstname") %&gt;" 
                              size="17"
                    /&gt;
                &lt;/td&gt; 
		&lt;td&gt; 
                    &lt;input type="radio" checked
                              name="&lt;%= searchFieldModeNames_customer.get("firstname") %&gt;"
                              value="and"&gt; AND
                    &lt;input type="radio" 
                              name="&lt;%= searchFieldModeNames_customer.get("firstname") %&gt;
                              value="or"&gt; OR
		&lt;/td&gt; 
		&lt;td&gt; 
                    &lt;input type="checkbox" 
                              name="&lt;%= searchFieldAlgorithmNames_customer.get("firstname") %&gt;"
                              size="30" 
                              value="weak"&gt;Weak
		&lt;/td&gt; 
            &lt;/tr&gt; 
            &lt;tr bgcolor="#BBCCBB"&gt; 
                &lt;td&gt;Last name&lt;/td&gt; 
		&lt;td&gt;
                &lt;input type="text"
                          name="&lt;%= searchFieldNames_customer.get("lastname") %&gt;"
                          size="17"/&gt;
                &lt;/td&gt; 
		&lt;td&gt;
                    &lt;input type="radio" checked  
                              name="&lt;%= searchFieldModeNames_customer.get("lastname") %&gt;"
                              value="and"          
                    &gt; AND
                    &lt;input type="radio" 
                              name="&lt;%= searchFieldModeNames_customer.get("lastname") %&gt;
                              value="or"
                    &gt; OR
		&lt;/td&gt; 
		&lt;td&gt; 
                    &lt;input type="checkbox" 
                              name="&lt;%= searchFieldAlgorithmNames_customer.get("lastname") %&gt;"
                              size="30"
                              value="weak"
                    &gt;Weak
		&lt;/td&gt; 
            &lt;/tr&gt; 
</screen>
</sect2>
                </sect1>
                
                
                <!-- END OF SEARCHING, BEGGINING OF QUERY SUPPORT -->
                
                <sect1>
			<title>Query Support
</title>
			<para>To make the usage of sql queries more flexible in dbforms you can use the query element which can be used to:
</para><itemizedlist mark="opencircle">
<listitem>
<para>Create <emphasis role="italic">group by</emphasis> with flexible <emphasis role="italic">where</emphasis> part.
</para>
</listitem>
<listitem>
<para>Create joined sql with a flexible <emphasis role="italic">join</emphasis> statement
</para>
</listitem>
<listitem>
<para>Create an alias of an existing table
</para>
</listitem>
<listitem>
<para>Make dynamic changes of the query which prevents the use of a view in the database.
</para>
</listitem>
</itemizedlist>
			
			
			
			
		
		<sect2>
			<title>
				<emphasis role="bold">Examples:</emphasis>
			</title>
			<sect3>
				<title>group by
</title>
				<para>In a table with:
</para><blockquote>
<screen>
create table values

    (cno integer not null primary key,

        type char(20) not null,

        date timestamp not null,

        value number not null

   )
</screen>
</blockquote>
				
 
				<para>You need a query with:
</para>
<blockquote>
<screen>
Select type, sum(value) as sumValue where date &lt; ? 
group by type having sumValue &gt; ?
</screen>
</blockquote>
				<para>Because the date should be selected by the user, you can not use a fixed view in the database. However, this is possible using the <emphasis role="bold">query</emphasis> element in dbforms_config.xml:</para>
<blockquote>
<screen>
&lt;query name="valuesGroup" from="values" groupBy=type&gt;
    &lt;field="type" type="char"&gt;
    &lt;field="sumValue" expression=sum(value) type="number"&gt;
    
    &lt;search="date" type="timestamp"&gt;
    
&lt;/query&gt;		 
</screen></blockquote>				 
			</sect3>
			<sect3>
				<title>join
</title>
<blockquote>
<screen>
&lt;query name="viewname" from="table1 left join table2 on table1.id = table2.id"&gt;
    &lt;field1 type=char&gt;
&lt;/query&gt;			
</screen></blockquote>	</sect3>
			<sect3>
				<title>Simple alias
</title>
<blockquote>
<screen>
&lt;query name="aliasname" from="table" /&gt;
</screen></blockquote>
<itemizedlist mark="opencircle">
<listitem>
<para>can be used to have the same table more than once on a page.
</para>
</listitem>
<listitem>
<para>inherits all field definitions from the table.
</para>
</listitem>
<listitem>
<para>is updateable!
</para>
</listitem>
<listitem>
<para>may be another query.
</para>
</listitem>
</itemizedlist>				
				
				
				
			</sect3>
		</sect2>
		<sect2>
			<title>Use within dbforms-config.xml
</title>
			<para>Here is an excerpt from the DTD:
</para>
			<para/>
			<para>
				<table>
					<title/>
					<tgroup cols="2">
						<tbody>
							<row>
								<entry>  &lt;!ELEMENT query (field*, search*)&gt;</entry>
								<entry/>
							</row>
							<row>
								<entry>  &lt;!ATTLIST query</entry>
								<entry/>
							</row>
							<row>
								<entry>    name              CDATA #REQUIRED</entry>
								<entry>Name of the table, same meaning as in table attribute</entry>
							</row>
							<row>
								<entry>    from              CDATA #IMPLIED</entry>
								<entry>Name of the parent table. This table must be defined within dbforms-config.xml. If you leave out everything else, query is used as an updatable alias for the prior defined table!
If missing, </entry>
							</row>
							<row>
								<entry>    groupBy           CDATA #IMPLIED</entry>
								<entry>Group by clause for select</entry>
							</row>
							<row>
								<entry>    where             CDATA #IMPLIED</entry>
								<entry>Starting where part of select</entry>
							</row>
							<row>
								<entry>    followAfterWhere  CDATA #IMPLIED</entry>
								<entry>Must be OR or AND, will be appended to the starting where part if dbforms have build an own where part:
Where + followAfterWhere + where_from_dbforms</entry>
							</row>
							<row>
								<entry>    orderWithPos     CDATA #IMPLIED</entry>
								<entry>If true, the order part will build with fieldnumber instead of fieldname</entry>
							</row>
							<row>
								<entry>     distinct        CDATA #IMPLIED</entry>
								<entry>If true, select will be build as select distinct</entry>
							</row>
							<row>
								<entry>&gt;</entry>
								<entry/>
							</row>
							<row>
								<entry/>
							</row>
							<row>
								<entry>  &lt;!ATTLIST field</entry>
								<entry/>
							</row>
							<row>
								<entry>    name             CDATA #REQUIRED</entry>
								<entry>Name of field in table</entry>
							</row>
							<row>
								<entry>    type             CDATA #IMPLIED</entry>
								<entry>Type of field</entry>
							</row>
							<row>
								<entry>    autoInc          CDATA #IMPLIED</entry>
								<entry>stores if the field is AUTOINCremental</entry>
							</row>
							<row>
								<entry>    key              CDATA #IMPLIED</entry>
								<entry>=TRUE if field is key field</entry>
							</row>
							<row>
								<entry>    sortable         CDATA #IMPLIED</entry>
								<entry>all non-key-fields you want to be sortable should be declared sortable in the XML-config file</entry>
							</row>
							<row>
								<entry>    expression       CDATA #IMPLIED</entry>
								<entry>Expression of field. Results in
expression + AS + name </entry>
							</row>
							<row>
								<entry>  &gt;</entry>
								<entry/>
							</row>
							<row>
								<entry/>
							</row>
							<row>
								<entry>  &lt;!ELEMENT search EMPTY&gt;</entry>
								<entry>All elements of type search can be used as normal fields in dbforms. While construction the sql statement these fields will not be included in the from part. They will only be used to generate the where part of the query.
If the query has a groupBy statement, these fields will be used in the where part of the query if needed, not in the having part!</entry>
							</row>
							<row>
								<entry>  &lt;!ATTLIST search</entry>
								<entry/>
							</row>
							<row>
								<entry>    name             CDATA #REQUIRED</entry>
								<entry>Name of field in table or alias</entry>
							</row>
							<row>
								<entry>    expression       CDATA #IMPLIED</entry>
								<entry>Expression of field. Results in
expression + AS + name </entry>
							</row>
							<row>
								<entry>  &gt;</entry>
								<entry/>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
			<para/>
		</sect2>
                </sect1>
	</chapter>