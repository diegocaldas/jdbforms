<?xml version="1.0" encoding="UTF-8" ?>

 
	<chapter>
		<title>Filtering
</title>
		<sect1>
			<title>Introduction
</title>
			<para>Just like sorting, filtering of data rows is an important, even essential, issue for many database applications.
</para>
		</sect1>
		<sect1>
			<title>Filtering rows to be selected
</title>
			<para>Filtering a table-selection is the most typical case of filtering. In its simplest case, the Filter is nothing more than a part of the WHERE clause of the SQL SELECT statement used to retrieve the rows.
</para>
			<para>This kind of filtering is very easy applied in DbForms. The filter criteria may be passed in the filter attribute of  the dbform- root tag.
</para>
			<example>
				<title>Listing 24  An example for static filtering
</title>
				<programlisting>
            <emphasis role="bold">&lt;db:dbform</emphasis> tableName="employee" maxRows="*" followUp="/employees.jsp" autoUpdate="false" <emphasis role="bold">filter</emphasis>="deptno=101,salary&gt;=30000,name~Peter%"
                ...
 
            &lt;/db: dbform&gt; 
		</programlisting>
			</example>
			<para>The example above restricts the result set to employees of department 101 with salaries higher or equal 30000 and a name <emphasis role="italic">like</emphasis> Peter (i.e. Peter Berger, Peter Smith, ...)
</para>
			<para>The following is a list of the operators that are currently supported by the filter attribute:
</para>
			<para/>
			<table>
				<title>Listing 25 Example for dynamic filtering
</title>
				<tgroup cols="3">
					<tbody>
						<row>
							<entry>Operator</entry>
							<entry>Meaning</entry>
							<entry>Example</entry>
						</row>
						<row>
							<entry>=</entry>
							<entry>Equals</entry>
							<entry>aField=value</entry>
						</row>
						<row>
							<entry>&lt;&gt;</entry>
							<entry>Not Equal</entry>
							<entry>aField&lt;&gt;value</entry>
						</row>
						<row>
							<entry>&lt;</entry>
							<entry>Smaller then</entry>
							<entry>aField&lt;100</entry>
						</row>
						<row>
							<entry>&gt;</entry>
							<entry>Greater then</entry>
							<entry>aField&gt;0</entry>
						</row>
						<row>
							<entry>&lt;=</entry>
							<entry>Smaller then or equal</entry>
							<entry>aField&lt;=100</entry>
						</row>
						<row>
							<entry>&gt;=</entry>
							<entry>Greater then or equal</entry>
							<entry>aField&gt;=0</entry>
						</row>
						<row>
							<entry>~</entry>
							<entry>Like</entry>
							<entry>aField~%P%</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<para/>
			<para>By default, filter elements are interpreted by dbforms and ANDed together to build a final where Clause.  In certain situations, a logical OR is required between individual elements.  This is achieved by using the pipe(|) symbol:
</para>
<blockquote>
			<para>aField&lt;10,aField=1,|aField=3
</para>
			<para>will render the following where Clause
</para>
			<para>WHERE aField&lt;10 AND aField=1 OR aField=3
</para>
			<para>Dynamic filtering is possible as well, as the filter-attribute gets dynamically evaluated by the jsp container.
</para></blockquote>
			<example>
				<title>Listing 25 Example for dynamic filtering
</title>
				<programlisting>
            &lt;%
                // scriptlet determines filter
 
		StringBuffer myFilter = new StringBuffer();
 
		myFilter.append("aField=");
 
		myFilter.append(request.getParameter("SomeVal"));
 
            %&gt; 
		
            <emphasis role="bold">&lt;db:dbform</emphasis> tableName="employee" maxRows="*" followUp="/employees.jsp" autoUpdate="false" <emphasis role="bold">filter</emphasis>="&lt;%= myFilter.toString() %&gt;"<emphasis role="bold">&gt;</emphasis> 
                ...
 
            &lt;/db: dbform&gt; 
		</programlisting>
			</example>
		</sect1>
		<sect1>
			<title>Filtering (restricting) rows to be manipulated
</title>
			<para>There are many different reasons why filtering of data is needed. However, in many cases the filtering should not only be applied to data-selection, but also to data manipulating operations such as <emphasis role="italic">insert</emphasis>s, <emphasis role="italic">update</emphasis>s or <emphasis role="italic">delete</emphasis>s.
</para>
			<para>
				<emphasis role="bold">Scenario:</emphasis>
			</para>
			<para>For example, we want to define a filter to guarantee that certain users may only manipulate data belonging to certain departments:  User A may only edit data for employees of department 100 and 200.
</para>
			<para>The detailed constraints should be defined as follows:
</para><itemizedlist mark="opencircle">
<listitem>
<para>it is forbidden for the user to insert any new employees with a dept.no. other than 100 or 200.
</para>
</listitem>
<listitem>
<para>it is forbidden for the user to update employee data where the dept_no field has an  assigned value other then 100 or 200.
</para>
</listitem>
<listitem>
<para>it is forbidden for the user to delete employees where the dept_no field has a value other then 100 or 200.
</para>
</listitem>
</itemizedlist>
		<para>We could easily carry out these rules by applying the methods and patterns we learned in the previous chapters:
</para>	
	<itemizedlist mark="opencircle">
<listitem>
<para>set a filter attribute on the &lt;dbform&gt; element
</para>
</listitem>
<listitem>
<para>use a select box or radio buttons for the dept_no field =&gt; so that the user has to choose from a set of valid values and has no chance to enter invalid values.
</para>
</listitem>
</itemizedlist>		
			
			
			
			
			<para>In many cases, this would be sufficient, but to make things really secure and to prevent malicious users from emulating form request using telnet, etc. we need to define these rules in a more secure way.
</para>
			<para>This approach is described in the chapter on Application Hookups.
</para>
			<para/>
		</sect1>
	</chapter>
 