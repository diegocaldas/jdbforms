<?xml version="1.0" encoding="UTF-8" ?>
 <chapter lang="en-US">
    <title>
   EJBs
    </title>
     
      <sect1><title>The Easy Way</title>
    <para>John Gagon who consulted developers on how to alter the code to use EJBs with DbForms finally reported that:</para>
     <para>I have Session EJBs working with DBForms....I didn't change any source code to DBForms either.</para>

<para>What I did was within an interceptor.  Lets say we have:
 
<screen> 

preInsert(HttpServletRequest request, DBFormsConfig config, Hashtable fieldValues, Connection con)
{
        
        //request and config stuff can go here.

        //jndi lookup...etc. 
        //(this could go in an abstract class that sandwiches between the dbforms interceptor
        //and your own)
        try
        {       

        fieldValues = beanInterface.doFunction(fieldValues, con);  
           //pass fieldValues for business logic.
           //shouldn't know about dbforms or request really. we want the beans to be interoperable.
           //the bean can have a flag that tells it whether to persist
           // or return persisance to the caller.
           //some utility beans can also convert the raw fieldValues to Beans 
           //and you can get dbforms apps to integrate with EJB apps...(kewl)
        
        }catch
        {
           //based on what is caught, you can ... rethrow ValidationExceptions, return DENY, 
           //throw blank ValidationExceptions(), log stuff, or simply decide to return GRANT anyway.
           //catch transactional exceptions, you could &quot;recheck&quot;.
        }


}

</screen></para>
<para>In this way, the interceptors are thin adapters that can do little extra dbforms and web based work without doing a lot of business logic (like I used to do). The session bean does business work on the fieldValues and can work with other servers, track certain rules, calculate.</para>

<para>I think you can even do some transactional locking ie: between an inserts/selects and updates by throwing
these exceptions or waiting &quot;while(not_finished)&quot;...of course, that can reduce performance. You could also session flag so that other interceptor methods cannot do that. (or you can put transactions in your database
functions if your database supports it. (you could use the stateful session bean and declare a level of transactional thread safety on those session beans I think too)</para>
 </sect1>
 <sect1><title>Example</title>
 
 <para>This example was tested on JBoss 3.0.0-Tomcat 4.0.6</para>
 
 <itemizedlist mark="opencircle">
<listitem>
<para>
 In application.xml, make sure you have
 
<screen> 
 &lt;!DOCTYPE web-app
     PUBLIC &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;
     &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;&gt;
 </screen>
</para>
</listitem>
<listitem>
<para>
 Make sure you have the jar you compiled
</para>
</listitem>
<listitem>
<para>
 do not play with jndi.properties
</para>
</listitem>
<listitem>
<para>
 don't need jboss-web.xml
</para>
</listitem>
</itemizedlist>
 
 <sect2><title>Example interceptor</title>
 <screen>
 public class BasicTestInterceptor extends DbEventInterceptorSupport
 {
 
 	static Category log = Category.getInstance(BasicTestInterceptor.class.getName());
 
 	/**
 	 * Checks to see if a number is in range inclusively given three Strings.
 	 * @param check String representing a number.
 	 * @param low String representing the low number of the range.
 	 * @param high String representing the high number of the range
 	 * @param inclusive set to true if you want the low &lt;= check and check &lt;= high .
 	 * @param digits the number in digits to the left of the decimal to round.
         *  positive, non-zero int
 	 * @return value converted to a string.
 	 * @throws ValidationException when encountering other exceptions like
         *  NumberFormatException.
 	 *
 	 */
 	public static boolean inRange(String check, String low, String high, boolean inclusive)
 		throws ValidationException
 	{
 	  try
 	  {
 		 NumericValidationLocal numericValidation = EjbUtil.getNumericValdiationBean();
 		 if(numericValidation==null)
 		 {
 			 System.out.println(&quot;Null numericValidation&quot;);
 		 	 return false;
 		 }
 		 return numericValidation.inRange(check,low,high,inclusive);		 
   	  }
   	  catch(MathException me)
   	  {
 		  throw new ValidationException(me.getMessage());
 	  }
 	  catch(Exception e)
 	  {
 		  throw new ValidationException(&quot;&quot;);
 	  }
 
     }//inRange(...)
 
 	...
 }//BasicTestInterceptor
 
 package com.atser.sejb.math;
 
 
 
 public interface NumericValidationLocal 
 	extends javax.ejb.EJBLocalObject
 {
 
 	/**
 	 * Checks to see if a number is in range.
 	 * Range is inclusive given three Strings.
 	 * @param check String representing a number.
 	 * @param low String representing the low number of the range.
 	 * @param high String representing the high number of the range
 	 * @param inclusive set to true 
 	 *  if you want the low &lt;= check and check &lt;= high .
 	 * @param digits the number in digits to the 
 	 *  left of the decimal to round. positive, non-zero integer only. 
         *  For example: 1438 with 1 passed in will give us 1440.
 	 * @return value converted to a string.
 	 * @throws ValidationException for any number format problems.
 	 */
 	public boolean inRange(
 			String check, 
 			String low, 
 			String high, 
 			boolean inclusive
 			)
 		throws MathException;	
 
 
 }//NumericValidationLocal
 
 package com.atser.sejb.math;
 
 
 public interface NumericValidationLocalHome
 	extends javax.ejb.EJBLocalHome
 {
 
 	NumericValidationLocal create() throws javax.ejb.CreateException;
 
 }//NumericValidationLocal
 
 
 import javax.ejb.*;//SessionContext
 import org.apache.log4j.*;//Category
 
 
 public class NumericValidationStatelessBean  
 	implements javax.ejb.SessionBean
 {
 
 	private static Category log = 
 			Category.getInstance(&quot;NumericValidationStatefulBean&quot;);
 
 
 	private javax.ejb.SessionContext ctx;
 
 	/**
 	 * Provides generic range checking. 
 	 * Checks to see if a number is in range.
 	 * Range is inclusive given three Strings.
 	 * and returns true if in range or false if out of
 	 * specified range.
 	 */
 	public static boolean inRange(String check, 
 			String low, String high, boolean inclusive)
 		throws MathException
 	{
 		try
 		{
 			double c = Double.parseDouble(check);
 			double l = Double.parseDouble(low);
 			double h = Double.parseDouble(high);
 			if(inclusive)
 				return (l&lt;=c &amp;&amp; c&lt;=h);
 			else
 				return (l&lt;c &amp;&amp; c&lt;h);
 		}
 		catch(NumberFormatException nfe)
 		{
 			throw new MathException(&quot;Invalid arguements to method:
                            inRange(String check, String low, String high,
                            boolean inclusive):&quot;+check+&quot;,&quot;+low+&quot;
                            ,&quot;+high+&quot;,&quot;+inclusive);
 		}
 
 
   	}//inRange(...)
 
 
 	public void ejbCreate()
 	{
 		log.debug(&quot;ejbCreate()&quot;);
 	}//ejbCreate()
 
 
 	public void ejbRemove()
 	{
 		log.debug(&quot;ejbRemove()&quot;);
 	}//ejbRemove()
 
 
 	public void ejbActivate()
 	{
 		log.debug(&quot;ejbActivate()&quot;);
 	}//ejbActivate()
 
 
 	public void ejbPassivate()
 	{
 		log.debug(&quot;ejbPassivate()&quot;);
 	}//ejbPassivate()
 
 
 	public void setSessionContext(javax.ejb.SessionContext ctx)
 	{
 		this.ctx = ctx;
 		log.debug(&quot;setSessionContext(..)&quot;);
 		return;
 	}//setSessionContext(..)
 
   	
 }//NumericValidationStatefulBean
 </screen>
 </sect2>
 <sect2><title>jboss.xml</title>
 <screen>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;jboss&gt;
   &lt;enterprise-beans&gt;
     &lt;session&gt;
       &lt;ejb-name&gt;com/atser/sejb/math/NumericValidation&lt;/ejb-name&gt;
       &lt;jndi-name&gt;com/atser/sejb/math/NumericValidation&lt;/jndi-name&gt;
     &lt;/session&gt;
   &lt;/enterprise-beans&gt;
 &lt;/jboss&gt;
 </screen>
 </sect2>
 <sect2><title>ejb-jar.xml</title>
<screen>
 &lt;!DOCTYPE ejb-jar
   PUBLIC '-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN'
   'http://java.sun.com/j2ee/dtds/ejb-jar_2_0.dtd'&gt;
 &lt;ejb-jar&gt;
   &lt;enterprise-beans&gt;
     &lt;session&gt;
       &lt;!-- The JNDI name of the bean.  --&gt;
       &lt;ejb-name&gt;com/atser/sejb/math/NumericValidation&lt;/ejb-name&gt;
 
       &lt;!-- Class configuration for the bean --&gt;
       &lt;local-home&gt;com.atser.sejb.math.NumericValidationLocalHome&lt;/local-home&gt;
       &lt;local&gt;com.atser.sejb.math.NumericValidationLocal&lt;/local&gt;
       &lt;ejb-class&gt;com.atser.sejb.math.NumericValidationStatelessBean&lt;/ejb-class&gt;
       &lt;session-type&gt;Stateless&lt;/session-type&gt;
       &lt;transaction-type&gt;Container&lt;/transaction-type&gt;
     &lt;/session&gt;
   &lt;/enterprise-beans&gt;
 &lt;/ejb-jar&gt;
 </screen>
 </sect2>
 <sect2><title>web.xml</title>
 <screen>
 &lt;ejb-local-ref&gt;
         &lt;ejb-ref-name&gt;ejb/NumericValidation&lt;/ejb-ref-name&gt;
         &lt;ejb-ref-type&gt;Session&lt;/ejb-ref-type&gt;
         &lt;local-home&gt;com.atser.sejb.math.NumericValidationLocalHome&lt;/local-home&gt;
         &lt;local&gt;com.atser.sejb.math.NumericValidationLocal&lt;/local&gt;
         &lt;ejb-link&gt;com/atser/sejb/math/NumericValidation&lt;/ejb-link&gt;
   &lt;/ejb-local-ref&gt;
   
   </screen>
 </sect2>
 </sect1>
</chapter>