<?xml version="1.0" encoding="UTF-8"?>

<chapter>
  <title>File uploads
</title>
  <sect1>
    <title>Introduction
</title>
    <para>In the past, most database applications dealt with data-rows stored in simple alphanumerical fields.  But today, there is an increasing demand to be able to store and manipulate 
      <emphasis role="italic">complex</emphasis> data. Complex data is imminent not only in multimedia applications for the Web, but also in specialized application domains such as document- and workflow management.

    </para>
    <para>Most relational DBMS vendors have added the capabilities to manipulate binary large objects (BLOBs) in the database. However, in many cases BLOBs are still not a viable option:
</para>
    <itemizedlist mark="opencircle">
      <listitem>
        <para>if the application uses a RDBMS or JDBC-driver without BLOB-support
</para>
      </listitem>
      <listitem>
        <para>if BLOB-support is too slow or even buggy
</para>
      </listitem>
      <listitem>
        <para>if the files should be accessible without using a database layer. For instance, imagine a web content management system placing files (images, pdf's, applets, etc) directly into the Http-Root of the server.
</para>
      </listitem>
    </itemizedlist>
    <para>DbForms addresses 
      <emphasis role="italic">all of these situations:</emphasis> On the one hand, it supports the upload (and download) of files into classical BLOB fields, and on the other, it supports a file-system approach, allowing database-driven management of  files outside of the database. (Depending on your RDBMS, a binary large object is called a BLOB, IMAGE, etc.)

    </para>
  </sect1>
  <sect1>
    <title>BLOB-fields
</title>
    <sect2>
      <title>Defining BLOBs in the model definition
</title>
      <para>Managing BLOB Fields using DbForms is a trivial task. First, you have to tell DbForms about BLOB-Fields in the xml-configuration file:
</para>

<para>NOTE: after version 2.2, interceptor based BLOB handling was introduced. The interceptor
org.dbforms.event.BlobInterceptor is used to store the filename of an uploaded file in a
specified column. In previous versions, the BLOB was stored as a serialized Java object in the
database along with the file meta data. However, the disadvantage of this solution was the lack
of long term storage (i.e. a change in the wrapper class would lead to ClassCastExceptions) and 
the BLOB is not readable by other (non-DbForms) applications, because those apps can't de-serialize
the java object.</para> 

<para>To switch back to the old way of handling BLOBs, you can set the optional attribute "blobHandling" to "classic" in the table definition in you dbforms config file.</para>

<para>More documentation on this issue will follow; until then this section is a bit outdated. meanwhile,
please refer to the API doc for class org.dbforms.event.BlobInterceptor to see how to configure the
BLOB interceptor.</para>
      <screen>
        <emphasis role="bold">&lt;dbforms-config&gt;</emphasis>
                &lt;table name="pets"&gt; 
                    &lt;field name="pet_id" fieldType="int" isKey="true" autoInc="true" /&gt; 
                    &lt;field name="name" fieldType ="char" /&gt; 
                    &lt;field name="portrait_pic" 
        <emphasis role="bold">fieldType ="blob"</emphasis> /&gt; 
                    &lt;field name="story" 
        <emphasis role="bold">fieldType ="blob"</emphasis> /&gt; 
		
				&lt;/table&gt; 
            &lt;/dbforms-config&gt; 
    
      </screen>
      <para>The configuration-code-snippet shown above in Listing 6 tells DbForms that the fields portrait_pic and story are of type BLOB. As you can see, DbForms allows more than one field defined in a table to be of type BLOB.
</para>
    </sect2>
    <sect2>
      <title>Uploading files into BLOBs
</title>
      <para>After defining our BLOB-powered table, we want to manage the BLOB fields. Of course data-input elements like textField or select cannot be applied to BLOBs. For this purpose a new Data-Element is introduced:
</para>
      <screen>
        <emphasis role="bold">&lt;db:file</emphasis>
        <emphasis role="bold">fieldName</emphasis>=portrait_pic&gt;
        
      </screen>
      <para>The attribute 
        <computeroutput>fieldName</computeroutput> refers to the name of the field, the file needs to be uploaded into. There are additional attributes available for this element (accept, maxLength, etc.), please see chapter DbForms Custom Tag Library for additional information)

      </para>
      <para>This Custom Tag gets rendered as an HTML &lt;file&gt; - tag, as shown next:
</para>
      <para>
        <mediaobject id="result_visible_to_user">
          <imageobject role="html">
            <imagedata format="PNG" fileref="images/figures/result_visible_to_user.png"/>
          </imageobject>
          <imageobject role="fo">
            <imagedata format="PNG" fileref="../images/figures/result_visible_to_user.png"/>
          </imageobject>
        </mediaobject>
      </para>
      <para>This HTML-element enables multipart-enabled browsers to submit files to the server. Be aware that not all browsers support this functionality.
</para>
      <para>
        <emphasis role="bold">Important</emphasis>: the multipart-attribute of the &lt;dbforms&gt; element must be set to 
        <computeroutput>true</computeroutput> to support multipart requests!

      </para>
    </sect2>
    <sect2>
      <title>Updating and deleting BLOBs
</title>
      <para>Regarding update and delete operations, BLOB fields may be treated similar to common (alphanumerical) fields:
</para>
      <para>if a user hits the DELETE-button, the BLOB fields of the selected row will be deleted. (this is done automatically by the RDMB)
</para>
      <para>If a user hits the UPDATE and no new file is uploaded, the existing BLOB will NOT be modified. If a user has chosen a new file, (using the Browse- Button or by entering a valid file-path into the text-field left to the button) any existing BLOB at the selected row will be overwritten with the new value.
</para>
    </sect2>
    <sect2>
      <title>Retrieving BLOBs
</title>
      <para>Managing BLOBs as described above may be sufficient in most cases. But sometimes, we may want to reverse the process: we may want to 
        <emphasis role="italic">retrieve</emphasis> BLOBs. (for instance, to provide users the ability of visualizing uploaded images, etc.)

      </para>
      <para>DbForms provides a simple way of retrieving BLOBs from the database. You are, however not required to use it.  Again, using dbForms is meant to help you increase your productivity, if another tool or techniques is better for a given task  include it!
</para>
      <para>For retrieving a BLOB using DbForms BLOB-retrieving facility, you need to use the following tag:
</para>
      <programlisting>
        &lt;db:
        <emphasis role="bold">blobURL</emphasis> fieldName="portrait_pic"/&gt;
      </programlisting>
      <para>This tag renders an URL pointing to a servlet built into DbForms. This servlet retrieves the specified field from the database, tries to figure out the MIME type of the file, assigns it to the response and finally returns a stream of bytes containing the data of the BLOB.
</para>
      <para>To retrieve and render an image, the following JSP-code would need to be specified:
</para>
      <programlisting>
        &lt;
        <emphasis role="bold">img</emphasis> src=&lt;db:
        <emphasis role="bold">blobURL</emphasis> fieldName="portrait_pic"/&gt;width=100 height=80 border=0&gt; 
    
      </programlisting>
      <para/>
      <para>To establish a link to a BLOB (for example to a word or pdf document) you could write:
</para>
      <programlisting>
        &lt;
        <emphasis role="bold">a</emphasis> href=&lt;db:
        <emphasis role="bold">blobURL</emphasis> fieldName="portrait_pic"/&gt;&gt;Click to download&lt;/
        <emphasis role="bold">a</emphasis>&gt;
      </programlisting>
      <para>Dependent of the installed plug-ins and other browser-and system properties, either the MIME-matching plug-in (or helper application) will be opened, a save-as dialog will pop up or a download manager like 
        <emphasis role="italic">Gozilla!</emphasis> will be started.

      </para>
      <para>It is important to mention that the &lt;blobURL&gt; element is valid only if embedded in a &lt;body&gt; - element. The &lt;file&gt; tag works in &lt;header&gt;, &lt;body&gt; and &lt;footer&gt; elements. Within the &lt;body&gt; element, both - inserts and updates - are possible, within the other tags, only inserts are possible.
</para>
    </sect2>
  </sect1>
  <sect1>
    <title>File-system approach
</title>
    <para>DbForms also supports the storage of files on the file-system.  This is completely 
      <emphasis role="bold">transparent</emphasis> to the JSP (view)  developer! For uploading and retrieving file-system-stored objects, 
      <emphasis role="bold">the same tags and attributes</emphasis> are used as for uploading and retrieving BLOBs.

    </para>
    <para>The difference lies only in the definition of the model; instead of fieldType blob, we define a type called diskblob. I invented this term because I think it reflects what it represents  a binary large object stored to disk (instead of to the database)
</para>
    <sect2>
      <title>Defining DISKBLOBs in the model definition
</title>
      <para>As the following example and table show/explain, there are additional attributes available for defining a diskblob-field:
</para>
      <programlisting>
        <emphasis role="bold">&lt;dbforms-config&gt;</emphasis>
                &lt;table name="pets"&gt; 
                    &lt;field name="pet_id" fieldType="int" isKey="true" autoInc="true" /&gt; 
                    &lt;field name="name" fieldType ="char" /&gt; 
                    &lt;field name="portrait_pic" 
        <emphasis role="bold">fieldType</emphasis> ="diskblob"
            
        <emphasis role="bold">directory</emphasis>=c:\uploads\pets 
        <emphasis role="bold">encoding</emphasis>=true  /&gt; 
                    &lt;field name="story" 
        <emphasis role="bold">fieldType</emphasis> ="diskblob" 
            
        <emphasis role="bold">directory</emphasis>=x:\stories /&gt; 
    &lt;/table&gt;
            &lt;/dbforms-config&gt; 
    
      </programlisting>
      <table>
        <title>define a table capable of Blobs (depends on SQL dialect implemented by RDBM vendor)</title>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>Directory
[this attribute is required]</entry>
              <entry>Holds the directory uploaded files should be stored to. This directory
must exist and
b) must be writeable by the web-server </entry>
            </row>
            <row>
              <entry>Encoding
[this attribute is optional]</entry>
              <entry>Holds either &#147;true&#148; or &#147;false&#148;. If "true", then files will be renamed to ensure that every file is unique and no file overwrites another. If this attribute is not specified, the default "false" is applied (keeping original names and overwriting equal-named files)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para/>
      <para>With the definition shown in the example preceeding the table, we can expect the following behavior:
</para>
      <para>If a portrait_pic (lets say dog.jpg) is uploaded, it will be stored in directory c:\upload\pets under a unique name like 34834893483_748734.jpg)
</para>
      <para>If  a story (lets say dog.pdf) is uploaded, it will be stored in directory x:\stories (which may be a virtual directory pointing to another computer-box) under its original name.
</para>
    </sect2>
    <sect2>
      <title>What goes on behind the scenes
</title>
      <para>You might ask: How does DbForms remember where it stores the files? The answer is simple: the references to the actual physical files are stored in the specified DISKBLOB field, which turns out to be an ordinary alphanumerical (CHAR, VARCHAR, or similar) field.
</para>
      <para>Following our example, the pets table would now contain a row such as the one displayed below:
</para>
      <para/>
      <para/>
      <para>
        <figure>
          <title>Physical representation of our example
</title>
          <mediaobject id="MousePicture">
            <imageobject role="html">
              <imagedata format="PNG" fileref="images/figures/physical_representation.png"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata format="PNG" fileref="../images/figures/physical_representation.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
      <para>Both files are stored in their respective directories (c:\upload\pets  x:\stories). The directory names are not included in the references for two reasons (please email me any arguments to the contrary):
</para>
      <para>It is not necessary because this information is managed by the XML-configuration
</para>
      <para>The value may be retrieved using a simply db:label or db:textField tag. It is not a good idea to expose server internals (directory structure) to the clients.
</para>
    </sect2>
  </sect1>
  <sect1>
    <title>A working demo
</title>
    <para>The following demo (and others) can be viewed
      <ulink url="http://www.dbforms.org/demo.html">
        <citetitle> online here</citetitle>
      </ulink>
    </para>
    <para>Let's imagine we want a little application for managing information about pets: their name, a portrait-pic and a funny story about them. We will use our example-table defined earlier in this chapter.
</para>
    <para>Using mySQL, this table could have been created as follows: (check your RDBMS-SQL-manual if you are not sure how your database handles auto incremental fields or BLOBs )
</para>
    <programlisting>
                CREATE TABLE 
      <emphasis role="bold">pets</emphasis> (

                pet_id int AUTO_INCREMENT NOT NULL PRIMARY KEY ,
 
    name char (30) NULL ,
 
    portrait_pic BLOB NULL ,
 
    story BLOB NULL ,
 
    );
 
    
    </programlisting>
    <para>Here is the source code we need to create the application:
</para>
    <programlisting>
&lt;%@ taglib uri="/WEB-INF/dbForms.tld" prefix="db" %&gt;
 &lt;html&gt;             
  &lt;head&gt;
    
      <emphasis role="bold">&lt;db:base/&gt;</emphasis>
    &lt;link rel="stylesheet" href="dbforms.css"&gt;

    &lt;SCRIPT&gt;
        &lt;!-- function openWin(s) {
        window.open(s,"littlewin","width=450,height=350,resizable=yes");
        }--&gt;
    &lt;/SCRIPT&gt;
  &lt;/head&gt;
  
  &lt;body&gt;
    
      <emphasis role="bold">&lt;db:errors/&gt;</emphasis>
      <emphasis role="bold">&lt;db:dbform</emphasis> tableName="pets" maxRows="*" followUp="/petportraits.jsp" multipart=true&gt;
        &lt;db:header&gt;
            
      <emphasis role="bold">&lt;db:gotoButton</emphasis> caption="Menu" destination="/menu.jsp" /&gt;
            
            &lt;hr&gt;
            &lt;h1&gt;Funny pets page (1)&lt;/h1&gt;
            &lt;center&gt;&lt;h3&gt;very important creatures&lt;/h3&gt;&lt;/center&gt;
            
            &lt;table border="5" width="60%" align="CENTER"&gt;
                &lt;tr&gt;
                    &lt;th&gt;name&lt;/th&gt;
                    &lt;th&gt;portrait-pic&lt;/th&gt;
                    &lt;th&gt;story&lt;/th&gt;
                    &lt;th&gt;actions&lt;/th&gt;
                &lt;/tr&gt;
                      
      <emphasis role="bold">&lt;/db:header&gt;</emphasis>
      <emphasis role="bold">&lt;db:body</emphasis> allowNew="false"&gt;
                &lt;tr&gt;
                    &lt;td&gt;
      <emphasis role="bold">&lt;db:textField</emphasis> fieldName="name" size="20" maxlength="30"/&gt;
                    &lt;/td&gt;
                    &lt;td&gt;
                        &lt;a href="javascript:openWin('/example_v06/
      <emphasis role="bold">&lt;db:blobURL</emphasis>
                            fieldName="portrait_pic"/&gt;')"&gt;
                            &lt;img src="
      <emphasis role="bold">&lt;db:blobURL</emphasis> fieldName="portrait_pic"/&gt;" border="0" 
                            width="60" height="60" alt="pet portrait (click to see full size)"&gt;
                        &lt;/a&gt;
                        &lt;br&gt;
                    &lt;/td&gt;
                    &lt;td&gt;
                        For a funny story about 
      <emphasis role="bold">&lt;db:label</emphasis> fieldName="name"/&gt; click
                        &lt;a href="javascript:openWin('/example_v06/
      <emphasis role="bold">&lt;db:blobURL</emphasis> fieldName="story"/&gt;')"&gt;
                        [here]
                    &lt;/td&gt;
                    &lt;td&gt;
                        
      <emphasis role="bold">&lt;db:updateButton</emphasis> caption="Update"/&gt;
                        
      <emphasis role="bold">&lt;db:deleteButton</emphasis> caption="Delete"/&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
        
      <emphasis role="bold">&lt;/db:body&gt;</emphasis>
      <emphasis role="bold">&lt;db:footer&gt;</emphasis>
            &lt;/table&gt;
      
            &lt;center&gt;&lt;h3&gt;upload new pet portrait:&lt;/h3&gt;&lt;/center&gt;
            &lt;p&gt;
            &lt;center&gt;Please fill out the following form!&lt;/center&gt;
            &lt;/p&gt;
                                        
             &lt;table align="center" border="3"&gt;
                &lt;tr&gt;
                    &lt;td&gt;Pet's Name:&lt;/td&gt;
                    &lt;td&gt;
                        
      <emphasis role="bold">&lt;db:textField</emphasis> size="20" maxlength="30" fieldName="name"/&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;Picture:&lt;/td&gt;
                    &lt;td&gt;
                        
      <emphasis role="bold">&lt;db:file</emphasis> fieldName="portrait_pic" accept="image/*" /&gt;
                    &lt;/td&gt;
                &lt;tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;
                        Funny story&lt;br&gt;(any format: html, pdf, txt, word,...)
                    &lt;/td&gt;
                    &lt;td&gt;
                        
      <emphasis role="bold">&lt;db:file</emphasis> fieldName="story" /&gt;
                    &lt;/td&gt;
                &lt;tr&gt;
            &lt;/table&gt;
                                        
            &lt;br&gt;
            &lt;center&gt;
                
      <emphasis role="bold">&lt;db:insertButton</emphasis> caption="Right, load the portrait to server..!!"/&gt;
            &lt;/center&gt; 
      
            &lt;hr&gt;
      
        
      <emphasis role="bold">&lt;/db:footer&gt;</emphasis>
      <emphasis role="bold">&lt;/db:dbform&gt;</emphasis>
      
  &lt;/body&gt;
 &lt;/html&gt;
                        
    </programlisting>
    <para>You have now seen 
      <computeroutput>&lt;blobURL&gt;</computeroutput> and 
      <computeroutput>&lt;file&gt;</computeroutput> in action!  As you can see, it is pretty easy to handle files with DbForms. Most of the code is about laying out the html-view and playing around with JavaScripts to create pop-up windows for showing the pet-stories and portraits in an attractive way.

    </para>
    <para>The final result of our efforts looks like this:
</para>
    <para/>
    <para>
      <figure>
        <title>our little BLOB-App in action
</title>
        <mediaobject id="BLOB-App_in_action.png">
          <imageobject role="html">
            <imagedata format="PNG" fileref="images/figures/BLOB-App_in_action.png"/>
          </imageobject>
          <imageobject role="fo">
            <imagedata format="PNG" fileref="../images/figures/BLOB-App_in_action.png"/>
          </imageobject>
        </mediaobject>
      </figure>
    </para>
  </sect1>
</chapter>