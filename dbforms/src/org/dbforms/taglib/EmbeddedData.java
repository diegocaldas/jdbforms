/*
 * $Header$
 * $Revision$
 * $Date$
 *
 * DbForms - a Rapid Application Development Framework
 * Copyright (C) 2001 Joachim Peer <j.peer@gmx.net> et al.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 */

package org.dbforms.taglib;

import org.dbforms.*;
import java.io.*;
import java.util.*;
import java.sql.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import org.apache.log4j.Category;

public abstract class EmbeddedData extends TagSupport {

	static Category logCat = Category.getInstance(EmbeddedData.class.getName());
	// logging category for this class

	protected Hashtable data;
	protected String name;

	public int doStartTag() throws JspException {

		/******************************************************************************** 
		 * Grunikiewicz.philip@hydro.qc.ca
		 * 2001-09-21
		 *
		 * Sometimes a developer may want to execute the embedded data query for each row. i.e. not cache the result set.
		 * Example:
		 *
		 *	Table contains 1000+ of rows, use queryData with qualified 'where' clause.
		 *  Data cannot be cached because each subsequent row need to execute a different query 
		 *  (whereClause with different parameters)
		
		 ********************************************************************************/

		Vector d = null;
		// If disableCache not activated, was the data generated by another instance on the same page yet?
		if (!("true".equals(this.getDisableCache())))
			d = (Vector) pageContext.getAttribute(name, PageContext.PAGE_SCOPE);

		// if not, we do it
		if (d == null) {

			logCat.info("generating Embeddeddata " + name);

			// take Config-Object from application context - this object should have been
			// initalized by Config-Servlet on Webapp/server-startup!
			DbFormsConfig config =
				(DbFormsConfig) pageContext.getServletContext().getAttribute(
					DbFormsConfig.CONFIG);

			Connection con = config.getDbConnection().getConnection();
			logCat.debug("Created new connection - " + con);
			if (con == null) {
				throw new JspException("EmbeddedData has got no database connection!");
			}

			try {

				d = fetchData(con);

				// Cache only when required...
				if (!("true".equals(this.getDisableCache())))
					pageContext.setAttribute(name, d, PageContext.PAGE_SCOPE);
				// cache result for further loops

			} catch (SQLException sqle) {
				throw new JspException(
					"Database error in EmbeddedData.fetchData " + sqle.toString());
			} finally {
				// The connection should not be null - If it is, then you might have an infrastructure problem!
				// Be sure to look into this!  Hint: check out your pool manager's performance! 

				if (con != null) {
					try {
						logCat.debug("About to close connection - " + con);
						con.close();
						logCat.debug("Connection closed");
					} catch (SQLException sqle2) {
						sqle2.printStackTrace();
					}
				}
			}

		} else
			logCat.info(" Embeddeddata " + name + " already generated");

		((DataContainer) getParent()).setEmbeddedData(d);
		// DbBaseMultiTag are: select, radio, checkbox!

		return SKIP_BODY;
	}

	/**
	this method is implemented by subclasses in order to match the user's need for specific data.
	*/
	protected abstract Vector fetchData(Connection con) throws SQLException;

	/**
	returns the unique name of the embedded data
	*/
	public String getName() {
		return name;
	}

	/**
	set the name of the embedded data.
	every embedded data entity on a jsp page has to have a unique name. this name is used for
	storing (caching) and retrieving data in Page-Scope. this is useful if a tag gets evaluated
	many times -> we do not want the queries etc. to be executed every time!
	*/
	public void setName(String name) {
		this.name = name;
	}

	protected String disableCache = "false";

	/**
	 * Insert the method's description here.
	 * Creation date: (2001-09-21 12:20:42)
	 * @return java.lang.String
	 */
	public java.lang.String getDisableCache() {
		return disableCache;
	}

	/**
	 * Insert the method's description here.
	 * Creation date: (2001-09-21 12:20:42)
	 * @param newDisableCache java.lang.String
	 */
	public void setDisableCache(java.lang.String newDisableCache) {
		disableCache = newDisableCache;
	}
}