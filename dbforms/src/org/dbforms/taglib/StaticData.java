/*
 * $Header$
 * $Revision$
 * $Date$
 *
 * DbForms - a Rapid Application Development Framework
 * Copyright (C) 2001 Joachim Peer <joepeer@excite.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 */

package org.dbforms.taglib;

import org.dbforms.interfaces.IDataContainer;
import org.dbforms.interfaces.IKeyValuePairList;
import org.dbforms.util.KeyValuePair;

import java.sql.Connection;

import java.util.Collection;
import java.util.Vector;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.PageContext;



/**
 * DOCUMENT ME!
 *
 * @author $author$
 * @version $Revision$
 */
public class StaticData extends AbstractTagSupportWithScriptHandler
   implements javax.servlet.jsp.tagext.TryCatchFinally, IKeyValuePairList {
   private String name;
   private Vector data;

   /**
    * set the name of the embedded data. every embedded data entity on a jsp
    * page has to have a unique name. this name is used for storing (caching)
    * and retrieving data in Page-Scope. this is useful if a tag gets
    * evaluated many times -> we do not the tag get parsed more than once
    * #fixme: encode name in order to avoid naming conficts!
    *
    * @param name DOCUMENT ME!
    */
   public void setName(String name) {
      this.name = name;
   }


   /**
    * returns the unique name of the embedded data
    *
    * @return DOCUMENT ME!
    */
   public String getName() {
      return name;
   }


   /**
    * DOCUMENT ME!
    *
    * @param pair DOCUMENT ME!
    */
   public void addElement(KeyValuePair pair) {
      data.add(pair);
   }


   /**
    * DOCUMENT ME!
    *
    * @return DOCUMENT ME!
    *
    * @throws JspException DOCUMENT ME!
    */
   public int doAfterBody() throws JspException {
      // make parsed data available to other instances
      pageContext.setAttribute(name, data, PageContext.PAGE_SCOPE);

      return SKIP_BODY; // 1 iteration only
   }


   /**
    * DOCUMENT ME!
    *
    * @param t DOCUMENT ME!
    *
    * @throws Throwable DOCUMENT ME!
    */
   public void doCatch(Throwable t) throws Throwable {
      throw t;
   }


   /**
    * DOCUMENT ME!
    *
    * @return DOCUMENT ME!
    *
    * @throws JspException DOCUMENT ME!
    */
   public int doEndTag() throws JspException {
      ((IDataContainer) getParent()).setEmbeddedData(data); // DbBaseMultiTag are: select, radio, checkbox!

      return EVAL_PAGE;
   }


   /**
    * DOCUMENT ME!
    */
   public void doFinally() {
      name = null;
      data = null;
   }


   /**
    * DOCUMENT ME!
    *
    * @return DOCUMENT ME!
    *
    * @throws JspException DOCUMENT ME!
    */
   public int doStartTag() throws JspException {
      // was the data generated by another instance on the same page yet?
      data = (Vector) pageContext.getAttribute(name, PageContext.PAGE_SCOPE);

      // if not, we do it
      // (the embedded  staticDataItem's will fill the hashtable)
      if (data == null) {
         data = new Vector();

         return EVAL_BODY_BUFFERED;
      } else {
         return SKIP_BODY;
      }
   }


   /**
    * for use from parent element [radio, select, etc.]
    *
    * @param con DOCUMENT ME!
    *
    * @return DOCUMENT ME!
    */
   protected Collection fetchData(Connection con) {
      return data;
   }
}
