/*
 * $Header$
 * $Revision$
 * $Date$
 *
 * DbForms - a Rapid Application Development Framework
 * Copyright (C) 2001 Joachim Peer <joepeer@excite.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 */

package org.dbforms.event;


import org.dbforms.config.DbFormsConfig;
import org.dbforms.config.Table;

import java.util.Properties;

import javax.servlet.http.HttpServletRequest;



/**
 * Abstract base class for all web-events. <br>
 * Implementations of this class will be generated by the
 * controller/EventEngine by dispatchting the incoming HTTP-request from the
 * client. In fact, the WebEvent classes itselves may provide methods
 * (constructors) to help parsing the request data. <br>
 * WebEvents may be processed by the controller and/or by the custom tags at
 * JSP-side.
 *
 * @author Joe Peer
 *
 */
public abstract class AbstractWebEvent {

   /** the configuration object */
   private DbFormsConfig config;

   /** the  HttpServletRequest object */
   private HttpServletRequest request;

   /** event properties */
   private Properties properties = null;

   /** followUp URL string */
   private String followUp;

   /** followUp URL string used when an error occurs */
   private String followUpOnError;

   /** type of event */
   private String type = "UNDEFINED";

   /** table  that tells on which table does the event operate on */
   private Table table;

   /**
    * Creates a new WebEvent object.
    *
    * @param tableId the table id
    * @param request the request object
    * @param config the configuration object
    */
   public AbstractWebEvent(int                tableId,
                   HttpServletRequest request,
                   DbFormsConfig      config) {
      setTable(config.getTable(tableId));
      setRequest(request);
      this.config = config;
   }

   /**
    * Gets the config attribute of the WebEvent object
    *
    * @return The config value
    */
   public DbFormsConfig getConfig() {
      return config;
   }


   /**
    * Sets the followUp attribute of the WebEvent object
    *
    * @param followUp The new followUp value
    */
   public void setFollowUp(String followUp) {
      this.followUp = followUp;
   }


   /**
    * Gets the followUp attribute of the WebEvent object
    *
    * @return The followUp value
    */
   public String getFollowUp() {
      return followUp;
   }


   /**
    * Sets the followUpOnError attribute of the WebEvent object
    *
    * @param followUpOnError The new followUpOnError value
    */
   public void setFollowUpOnError(String followUpOnError) {
      this.followUpOnError = followUpOnError;
   }


   /**
    * Gets the followUpOnError attribute of the WebEvent object
    *
    * @return The followUpOnError value
    */
   public String getFollowUpOnError() {
      return followUpOnError;
   }


   /**
    * Sets the properties attribute of the WebEvent object
    *
    * @param properties The new properties value
    */
   public void setProperties(Properties properties) {
      this.properties = properties;
   }


   /**
    * Gets the properties attribute of the WebEvent object
    *
    * @return The properties value
    */
   public Properties getProperties() {
      return properties;
   }


   /**
    * sets the request attribute of the WebEvent object
    *
    * @param request The new request value
    */
   public void setRequest(HttpServletRequest request) {
      this.request = request;
   }


   /**
    * Gets the request attribute of the WebEvent object
    *
    * @return The request value
    */
   public HttpServletRequest getRequest() {
      return request;
   }


   /**
    * DOCUMENT ME!
    *
    * @param table DOCUMENT ME!
    */
   public void setTable(Table table) {
      this.table = table;
   }


   /**
    * DOCUMENT ME!
    *
    * @return DOCUMENT ME!
    */
   public Table getTable() {
      return table;
   }


   /**
    * Sets the event type
    *
    * @param type The type to set
    */
   public void setType(String type) {
      this.type = type;
   }


   /**
    * Get the string that defines the current event type
    *
    * @return the string that defines the current event type
    */
   public String getType() {
      return type;
   }


   /**
    * Check if the current user has got the input privilege
    *
    * @param privileg the privilege value
    *
    * @return true  if the current user has got the input privilege, false
    *         otherwise
    */
   protected boolean hasUserPrivileg(int privileg) {
      return config.getTable(getTable().getId())
                   .hasUserPrivileg(getRequest(), privileg);
   }
}
