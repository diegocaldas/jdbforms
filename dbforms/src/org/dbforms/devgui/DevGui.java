/*
 * $Header$
 * $Revision$
 * $Date$
 *
 * DbForms - a Rapid Application Development Framework
 * Copyright (C) 2001 Joachim Peer <j.peer@gmx.net> et al.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 */

/*
 * DevGui.java
 *
 * Created on 26. April 2001, 14:50
 */

package org.dbforms.devgui;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import java.io.*;

/**
 *
 * -- DevGui --
 *
 * This SWING application provides support for automatic generation of JSP views.
 * It does so by retrieving database-metadata as XML file from a given datasource and by applying the
 * XML file to XSL stylesheets.
 *
 * HINTS FOR MAKING THIS APP MORE CONVENIENT ARE VERY WELCOME!
 *
 * Check manual or contact the author for more info.
 *
 * @author Joachim Peer <j.peer@gmx.net>
 * @version
 */
public class DevGui extends javax.swing.JFrame implements ActionListener{


    // Gui Variables declaration
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JTabbedPane jTabbedPane1;

	// windows (tabs)

	private PropertyPanel tab_dbPanel;
	private PropertyPanel tab_webAppPanel;
	private PropertyPanel tab_configFilePanel;
	private PropertyPanel tab_xslTranformPanel;

	// other variables
	private ProjectData projectData;
	private String dbFormsHomeStr;
	private File dbFormsHome;
	private String fileSeparator;

	private final String titleCore = "DbForms Developers' GUI - ";


	public ProjectData getProjectData() {
		return projectData;
	}

	public String getFileSeparator() {
		return fileSeparator;
	}

    /** Creates new form DevGui */
    public DevGui() {

		dbFormsHomeStr = System.getProperty("DBFORMS_HOME");
		if(dbFormsHomeStr!=null) {
			dbFormsHome = new File(dbFormsHomeStr);
			System.out.println("dbFormsHome="+dbFormsHome.getAbsolutePath());
			if(dbFormsHome.isDirectory() && dbFormsHome.canRead()) {

				// CREATE DATA MODEL + SOME HELPER INFOS
				this.projectData = new ProjectData();

				this.fileSeparator = System.getProperties().getProperty("file.separator");



				// CREATE GUI


        		this.setTitle(titleCore + "[New Project]");
				this.setSize(750,500);
				initComponents ();
				//        pack ();

		        doLayout();
			} else quickQuit("DBFORMS_HOME is set to \""+dbFormsHomeStr+"\", which is not a valid accessible directory.", 1);

		} else quickQuit("Pleases set the environment variable DBFORMS_HOME to the root of your unzipped DbForms-Distribution! Check manual for more info.", 1);

    }


	private void quickQuit(String message, int returnValue) {
		System.out.println(message);
		System.out.println("\nPlease drop a line of feedback to j.peer@gmx.net, thanks!\n");
		System.exit(returnValue);
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

		//there is a bug in JDK 1.3, so i can't switch off lightWeight tooltips
		//some of the tooltips will be partially or completly hidden
		//any ideas? please email me <j.peer@gmx.net>
    	//ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        jMenu1.setActionCommand("Project");
          jMenu1.setText("Project");

          newMenuItem.setActionCommand("New");
          newMenuItem.setText("New");
            newMenuItem.addActionListener(this);
            newMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_MASK, false));
            jMenu1.add(newMenuItem);

          openMenuItem.setActionCommand("Open");
            openMenuItem.setText("Open");
            openMenuItem.addActionListener(this);
            openMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK, false));
            jMenu1.add(openMenuItem);

          saveMenuItem.setActionCommand("Save");
            saveMenuItem.setText("Save");
            saveMenuItem.addActionListener(this);
            saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK, false));
            jMenu1.add(saveMenuItem);

          saveAsMenuItem.setActionCommand("Save As...");
            saveAsMenuItem.setText("Save As...");
            saveAsMenuItem.addActionListener(this);
            jMenu1.add(saveAsMenuItem);

          jMenu1.add(jSeparator1);

          exitMenuItem.setActionCommand("Exit");
            exitMenuItem.setText("Exit");
            exitMenuItem.addActionListener(this);
            jMenu1.add(exitMenuItem);

            jMenuBar1.add(jMenu1);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        }
        );

        setJMenuBar(jMenuBar1);

		 getContentPane().setLayout(new BorderLayout());


        getContentPane().add(java.awt.BorderLayout.CENTER, jTabbedPane1);
        jTabbedPane1.setTabPlacement(SwingConstants.LEFT);


		// install panels

		tab_webAppPanel = new WebAppPanel(this);
		//jTabbedPane1.addTab("(1) Web Application properties", null, tab_webAppPanel, "provide information about your web application");
		jTabbedPane1.add("(1) Web Application properties", tab_webAppPanel);

		tab_dbPanel = new DbPanel(this);
        //jTabbedPane1.addTab("(2) Database properties", null, tab_dbPanel, "provide valid data for creating a database connection");
        jTabbedPane1.add("(2) Database properties", tab_dbPanel);

		tab_configFilePanel = new ConfigFilePanel(this);
        //jTabbedPane1.addTab("(3) XML config", null, tab_configFilePanel, "automatically generate the DbForms Config file" );
		jTabbedPane1.add("(3) XML config", tab_configFilePanel);

		tab_xslTranformPanel = new XSLTransformPanel(this);
        //jTabbedPane1.addTab("(4) XSL transformation", null, tab_xslTranformPanel, "automatically generate JSP views based on table data stored in DbForms Config file");
		jTabbedPane1.add("(4) XSL transformation", tab_xslTranformPanel);

		tab_webAppPanel.doLayout();
		tab_dbPanel.doLayout();
		tab_configFilePanel.doLayout();
		tab_xslTranformPanel.doLayout();
/*
		jTabbedPane1.setSelectedIndex(0);
		jTabbedPane1.setSelectedIndex(1);
		jTabbedPane1.setSelectedIndex(2);
		jTabbedPane1.setSelectedIndex(3);
		jTabbedPane1.setSelectedIndex(0);

*/

    }//GEN-END:initComponents




	public void actionPerformed(ActionEvent e) {

		if(e.getSource()==newMenuItem) {

		  newProject();

		} else if(e.getSource()==openMenuItem) {

		  openProject();

		} else if(e.getSource()==saveMenuItem) {

		  saveProject();

		} else if(e.getSource()==saveAsMenuItem) {

		  saveAsProject();

		} else if(e.getSource()==exitMenuItem) {

		  exitProject();

		}

	}











   /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit (0);
    }//GEN-LAST:event_exitForm









//======================= BUSINESS METHODS


	private void updateGUI() {

		this.tab_dbPanel.setNewProjectData(projectData);
		this.tab_webAppPanel.setNewProjectData(projectData);
		this.tab_configFilePanel.setNewProjectData(projectData);
		this.tab_xslTranformPanel.setNewProjectData(projectData);

	}

    private void newProject() {

		this.projectData = new ProjectData();
		updateGUI();
		this.setTitle(titleCore + "[New Project]");

		System.out.println("new Project initialized");
	}


	private void openProject() {

			JFileChooser dlg_fileChooser = new JFileChooser();
			dlg_fileChooser.setDialogTitle("Open Project...");
			dlg_fileChooser.setVisible(true);

			int returnVal = dlg_fileChooser.showOpenDialog(this);

			if(returnVal == JFileChooser.APPROVE_OPTION) {
				File f =  dlg_fileChooser.getSelectedFile();

				try {

					if(f.isFile()) {

						this.projectData = ProjectData.loadFromDisc(f);
						updateGUI();
						this.setTitle(titleCore + "[" +projectData.getFile().getAbsolutePath() + "]");

					}

				} catch(IOException ioe) {
					ioe.printStackTrace();
					showExceptionDialog(ioe);
				}

			}

	}

	private void saveProject() {

		if(projectData.getFile() != null) {

				try {

					this.projectData.storeToDisc(projectData.getFile());


				} catch(IOException ioe) {
					ioe.printStackTrace();
					showExceptionDialog(ioe);
				}

		} else saveAsProject();

	}


	private void saveAsProject() {

			JFileChooser dlg_fileChooser = new JFileChooser();
			dlg_fileChooser.setDialogTitle("Save Project As...");
			dlg_fileChooser.setVisible(true);

			int returnVal = dlg_fileChooser.showSaveDialog(this);

			if(returnVal == JFileChooser.APPROVE_OPTION) {

				try {

					File f =  dlg_fileChooser.getSelectedFile();
					this.projectData.storeToDisc(f);
					this.setTitle(titleCore + "[" +projectData.getFile().getAbsolutePath() + "]");

				} catch(IOException ioe) {
					ioe.printStackTrace();
					showExceptionDialog(ioe);
				}
			}

	}

	private void exitProject() {
		if(!projectData.isUnsaved()) System.exit (0); else System.out.println("save first!");
	}







	public File getDbFormsHome() {
		return dbFormsHome;
	}



	private void showExceptionDialog(Exception e) {
		JOptionPane.showMessageDialog(this, "An exception occurred:\n\n"+e.toString()+"\n", "Exception", JOptionPane.ERROR_MESSAGE);
	}


    /**
    * @param args the command line arguments
    */
    public static void main (String args[]) {
        new DevGui ().show ();
    }




}
